// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AirExtraData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("value", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirExtraData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirExtraData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirExtraData", id.toString(), this);
    }
  }

  static load(id: string): AirExtraData | null {
    return changetype<AirExtraData | null>(store.get("AirExtraData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value!.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}

export class AirDailyAggregateEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("network", Value.fromString(""));
    this.set("contract", Value.fromString(""));
    this.set("protocolType", Value.fromString(""));
    this.set("protocolActionType", Value.fromString(""));
    this.set("daySinceEpoch", Value.fromBigInt(BigInt.zero()));
    this.set("startDayTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("updatedTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("stats", Value.fromString(""));
    this.set("walletCount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenCount", Value.fromBigInt(BigInt.zero()));
    this.set("transactionCount", Value.fromBigInt(BigInt.zero()));
    this.set("volumeInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyChange", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirDailyAggregateEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirDailyAggregateEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirDailyAggregateEntity", id.toString(), this);
    }
  }

  static load(id: string): AirDailyAggregateEntity | null {
    return changetype<AirDailyAggregateEntity | null>(
      store.get("AirDailyAggregateEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get network(): string {
    let value = this.get("network");
    return value!.toString();
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get protocolType(): string {
    let value = this.get("protocolType");
    return value!.toString();
  }

  set protocolType(value: string) {
    this.set("protocolType", Value.fromString(value));
  }

  get protocolActionType(): string {
    let value = this.get("protocolActionType");
    return value!.toString();
  }

  set protocolActionType(value: string) {
    this.set("protocolActionType", Value.fromString(value));
  }

  get daySinceEpoch(): BigInt {
    let value = this.get("daySinceEpoch");
    return value!.toBigInt();
  }

  set daySinceEpoch(value: BigInt) {
    this.set("daySinceEpoch", Value.fromBigInt(value));
  }

  get startDayTimestamp(): BigInt {
    let value = this.get("startDayTimestamp");
    return value!.toBigInt();
  }

  set startDayTimestamp(value: BigInt) {
    this.set("startDayTimestamp", Value.fromBigInt(value));
  }

  get updatedTimestamp(): BigInt {
    let value = this.get("updatedTimestamp");
    return value!.toBigInt();
  }

  set updatedTimestamp(value: BigInt) {
    this.set("updatedTimestamp", Value.fromBigInt(value));
  }

  get accounts(): Array<string> | null {
    let value = this.get("accounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set accounts(value: Array<string> | null) {
    if (!value) {
      this.unset("accounts");
    } else {
      this.set("accounts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get stats(): string {
    let value = this.get("stats");
    return value!.toString();
  }

  set stats(value: string) {
    this.set("stats", Value.fromString(value));
  }

  get walletCount(): BigInt {
    let value = this.get("walletCount");
    return value!.toBigInt();
  }

  set walletCount(value: BigInt) {
    this.set("walletCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value!.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get transactionCount(): BigInt {
    let value = this.get("transactionCount");
    return value!.toBigInt();
  }

  set transactionCount(value: BigInt) {
    this.set("transactionCount", Value.fromBigInt(value));
  }

  get volumeInUSD(): BigDecimal {
    let value = this.get("volumeInUSD");
    return value!.toBigDecimal();
  }

  set volumeInUSD(value: BigDecimal) {
    this.set("volumeInUSD", Value.fromBigDecimal(value));
  }

  get dailyChange(): string {
    let value = this.get("dailyChange");
    return value!.toString();
  }

  set dailyChange(value: string) {
    this.set("dailyChange", Value.fromString(value));
  }

  get extraData(): Array<string> | null {
    let value = this.get("extraData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set extraData(value: Array<string> | null) {
    if (!value) {
      this.unset("extraData");
    } else {
      this.set("extraData", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class AirDailyAggregateEntityStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocolActionType", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirDailyAggregateEntityStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirDailyAggregateEntityStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirDailyAggregateEntityStats", id.toString(), this);
    }
  }

  static load(id: string): AirDailyAggregateEntityStats | null {
    return changetype<AirDailyAggregateEntityStats | null>(
      store.get("AirDailyAggregateEntityStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocolActionType(): string {
    let value = this.get("protocolActionType");
    return value!.toString();
  }

  set protocolActionType(value: string) {
    this.set("protocolActionType", Value.fromString(value));
  }

  get addPoolLiquidityStats(): string | null {
    let value = this.get("addPoolLiquidityStats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set addPoolLiquidityStats(value: string | null) {
    if (!value) {
      this.unset("addPoolLiquidityStats");
    } else {
      this.set("addPoolLiquidityStats", Value.fromString(<string>value));
    }
  }

  get removePoolLiquidityStats(): string | null {
    let value = this.get("removePoolLiquidityStats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set removePoolLiquidityStats(value: string | null) {
    if (!value) {
      this.unset("removePoolLiquidityStats");
    } else {
      this.set("removePoolLiquidityStats", Value.fromString(<string>value));
    }
  }

  get farmPoolRewardStats(): string | null {
    let value = this.get("farmPoolRewardStats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set farmPoolRewardStats(value: string | null) {
    if (!value) {
      this.unset("farmPoolRewardStats");
    } else {
      this.set("farmPoolRewardStats", Value.fromString(<string>value));
    }
  }

  get swapStats(): string | null {
    let value = this.get("swapStats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set swapStats(value: string | null) {
    if (!value) {
      this.unset("swapStats");
    } else {
      this.set("swapStats", Value.fromString(<string>value));
    }
  }
}

export class AirToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
    this.set("standard", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirToken", id.toString(), this);
    }
  }

  static load(id: string): AirToken | null {
    return changetype<AirToken | null>(store.get("AirToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get standard(): string {
    let value = this.get("standard");
    return value!.toString();
  }

  set standard(value: string) {
    this.set("standard", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get totalSupply(): BigInt | null {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt | null) {
    if (!value) {
      this.unset("totalSupply");
    } else {
      this.set("totalSupply", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class AirTokenMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("displayContentType", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirTokenMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirTokenMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirTokenMetadata", id.toString(), this);
    }
  }

  static load(id: string): AirTokenMetadata | null {
    return changetype<AirTokenMetadata | null>(
      store.get("AirTokenMetadata", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get displayContentType(): string {
    let value = this.get("displayContentType");
    return value!.toString();
  }

  set displayContentType(value: string) {
    this.set("displayContentType", Value.fromString(value));
  }

  get displayContent(): string | null {
    let value = this.get("displayContent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set displayContent(value: string | null) {
    if (!value) {
      this.unset("displayContent");
    } else {
      this.set("displayContent", Value.fromString(<string>value));
    }
  }
}

export class AirDailyAggregateEntityAccount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromString(""));
    this.set("dailyAggregatedEntity", Value.fromString(""));
    this.set("volumeInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("index", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirDailyAggregateEntityAccount entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirDailyAggregateEntityAccount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirDailyAggregateEntityAccount", id.toString(), this);
    }
  }

  static load(id: string): AirDailyAggregateEntityAccount | null {
    return changetype<AirDailyAggregateEntityAccount | null>(
      store.get("AirDailyAggregateEntityAccount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get dailyAggregatedEntity(): string {
    let value = this.get("dailyAggregatedEntity");
    return value!.toString();
  }

  set dailyAggregatedEntity(value: string) {
    this.set("dailyAggregatedEntity", Value.fromString(value));
  }

  get volumeInUSD(): BigDecimal {
    let value = this.get("volumeInUSD");
    return value!.toBigDecimal();
  }

  set volumeInUSD(value: BigDecimal) {
    this.set("volumeInUSD", Value.fromBigDecimal(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value!.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }
}

export class AirAccount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirAccount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirAccount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirAccount", id.toString(), this);
    }
  }

  static load(id: string): AirAccount | null {
    return changetype<AirAccount | null>(store.get("AirAccount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get dailyAggregatedEntities(): Array<string> | null {
    let value = this.get("dailyAggregatedEntities");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set dailyAggregatedEntities(value: Array<string> | null) {
    if (!value) {
      this.unset("dailyAggregatedEntities");
    } else {
      this.set(
        "dailyAggregatedEntities",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class AirEntityDailyChangeStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set(
      "walletCountChangeInPercentage",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "tokenCountChangeInPercentage",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "transactionCountChangeInPercentage",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "volumeInUSDChangeInPercentage",
      Value.fromBigDecimal(BigDecimal.zero())
    );
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirEntityDailyChangeStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirEntityDailyChangeStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirEntityDailyChangeStats", id.toString(), this);
    }
  }

  static load(id: string): AirEntityDailyChangeStats | null {
    return changetype<AirEntityDailyChangeStats | null>(
      store.get("AirEntityDailyChangeStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get walletCountChangeInPercentage(): BigDecimal {
    let value = this.get("walletCountChangeInPercentage");
    return value!.toBigDecimal();
  }

  set walletCountChangeInPercentage(value: BigDecimal) {
    this.set("walletCountChangeInPercentage", Value.fromBigDecimal(value));
  }

  get tokenCountChangeInPercentage(): BigDecimal {
    let value = this.get("tokenCountChangeInPercentage");
    return value!.toBigDecimal();
  }

  set tokenCountChangeInPercentage(value: BigDecimal) {
    this.set("tokenCountChangeInPercentage", Value.fromBigDecimal(value));
  }

  get transactionCountChangeInPercentage(): BigDecimal {
    let value = this.get("transactionCountChangeInPercentage");
    return value!.toBigDecimal();
  }

  set transactionCountChangeInPercentage(value: BigDecimal) {
    this.set("transactionCountChangeInPercentage", Value.fromBigDecimal(value));
  }

  get volumeInUSDChangeInPercentage(): BigDecimal {
    let value = this.get("volumeInUSDChangeInPercentage");
    return value!.toBigDecimal();
  }

  set volumeInUSDChangeInPercentage(value: BigDecimal) {
    this.set("volumeInUSDChangeInPercentage", Value.fromBigDecimal(value));
  }
}

export class AirContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirContract", id.toString(), this);
    }
  }

  static load(id: string): AirContract | null {
    return changetype<AirContract | null>(store.get("AirContract", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }
}

export class AirDEXPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolAddress", Value.fromString(""));
    this.set("inputToken", Value.fromStringArray(new Array(0)));
    this.set("tokenBalances", Value.fromBigIntArray(new Array(0)));
    this.set("weightage", Value.fromBigDecimalArray(new Array(0)));
    this.set("outputToken", Value.fromString(""));
    this.set("fee", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirDEXPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirDEXPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirDEXPool", id.toString(), this);
    }
  }

  static load(id: string): AirDEXPool | null {
    return changetype<AirDEXPool | null>(store.get("AirDEXPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolAddress(): string {
    let value = this.get("poolAddress");
    return value!.toString();
  }

  set poolAddress(value: string) {
    this.set("poolAddress", Value.fromString(value));
  }

  get inputToken(): Array<string> {
    let value = this.get("inputToken");
    return value!.toStringArray();
  }

  set inputToken(value: Array<string>) {
    this.set("inputToken", Value.fromStringArray(value));
  }

  get tokenBalances(): Array<BigInt> {
    let value = this.get("tokenBalances");
    return value!.toBigIntArray();
  }

  set tokenBalances(value: Array<BigInt>) {
    this.set("tokenBalances", Value.fromBigIntArray(value));
  }

  get weightage(): Array<BigDecimal> {
    let value = this.get("weightage");
    return value!.toBigDecimalArray();
  }

  set weightage(value: Array<BigDecimal>) {
    this.set("weightage", Value.fromBigDecimalArray(value));
  }

  get outputToken(): string {
    let value = this.get("outputToken");
    return value!.toString();
  }

  set outputToken(value: string) {
    this.set("outputToken", Value.fromString(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }
}

export class AirLiquidityPoolStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dexPool", Value.fromString(""));
    this.set("walletCount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenCount", Value.fromBigInt(BigInt.zero()));
    this.set("transactionCount", Value.fromBigInt(BigInt.zero()));
    this.set("volumeInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyChange", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirLiquidityPoolStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirLiquidityPoolStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirLiquidityPoolStats", id.toString(), this);
    }
  }

  static load(id: string): AirLiquidityPoolStats | null {
    return changetype<AirLiquidityPoolStats | null>(
      store.get("AirLiquidityPoolStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dexPool(): string {
    let value = this.get("dexPool");
    return value!.toString();
  }

  set dexPool(value: string) {
    this.set("dexPool", Value.fromString(value));
  }

  get inputTokensStats(): Array<string> {
    let value = this.get("inputTokensStats");
    return value!.toStringArray();
  }

  set inputTokensStats(value: Array<string>) {
    this.set("inputTokensStats", Value.fromStringArray(value));
  }

  get outputTokenStats(): Array<string> {
    let value = this.get("outputTokenStats");
    return value!.toStringArray();
  }

  set outputTokenStats(value: Array<string>) {
    this.set("outputTokenStats", Value.fromStringArray(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }

  get walletCount(): BigInt {
    let value = this.get("walletCount");
    return value!.toBigInt();
  }

  set walletCount(value: BigInt) {
    this.set("walletCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value!.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get transactionCount(): BigInt {
    let value = this.get("transactionCount");
    return value!.toBigInt();
  }

  set transactionCount(value: BigInt) {
    this.set("transactionCount", Value.fromBigInt(value));
  }

  get volumeInUSD(): BigDecimal {
    let value = this.get("volumeInUSD");
    return value!.toBigDecimal();
  }

  set volumeInUSD(value: BigDecimal) {
    this.set("volumeInUSD", Value.fromBigDecimal(value));
  }

  get dailyChange(): string {
    let value = this.get("dailyChange");
    return value!.toString();
  }

  set dailyChange(value: string) {
    this.set("dailyChange", Value.fromString(value));
  }

  get extraData(): Array<string> | null {
    let value = this.get("extraData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set extraData(value: Array<string> | null) {
    if (!value) {
      this.unset("extraData");
    } else {
      this.set("extraData", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class AirLiquidityPoolInputTokenStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("liquidityPoolStatsRef", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("walletCount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenCount", Value.fromBigInt(BigInt.zero()));
    this.set("transactionCount", Value.fromBigInt(BigInt.zero()));
    this.set("volumeInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyChange", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirLiquidityPoolInputTokenStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirLiquidityPoolInputTokenStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirLiquidityPoolInputTokenStats", id.toString(), this);
    }
  }

  static load(id: string): AirLiquidityPoolInputTokenStats | null {
    return changetype<AirLiquidityPoolInputTokenStats | null>(
      store.get("AirLiquidityPoolInputTokenStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidityPoolStatsRef(): string {
    let value = this.get("liquidityPoolStatsRef");
    return value!.toString();
  }

  set liquidityPoolStatsRef(value: string) {
    this.set("liquidityPoolStatsRef", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get walletCount(): BigInt {
    let value = this.get("walletCount");
    return value!.toBigInt();
  }

  set walletCount(value: BigInt) {
    this.set("walletCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value!.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get transactionCount(): BigInt {
    let value = this.get("transactionCount");
    return value!.toBigInt();
  }

  set transactionCount(value: BigInt) {
    this.set("transactionCount", Value.fromBigInt(value));
  }

  get volumeInUSD(): BigDecimal {
    let value = this.get("volumeInUSD");
    return value!.toBigDecimal();
  }

  set volumeInUSD(value: BigDecimal) {
    this.set("volumeInUSD", Value.fromBigDecimal(value));
  }

  get dailyChange(): string {
    let value = this.get("dailyChange");
    return value!.toString();
  }

  set dailyChange(value: string) {
    this.set("dailyChange", Value.fromString(value));
  }

  get extraData(): Array<string> | null {
    let value = this.get("extraData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set extraData(value: Array<string> | null) {
    if (!value) {
      this.unset("extraData");
    } else {
      this.set("extraData", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class AirLiquidityPoolOutputTokenStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("liquidityPoolStatsRef", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("walletCount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenCount", Value.fromBigInt(BigInt.zero()));
    this.set("transactionCount", Value.fromBigInt(BigInt.zero()));
    this.set("volumeInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyChange", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirLiquidityPoolOutputTokenStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirLiquidityPoolOutputTokenStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirLiquidityPoolOutputTokenStats", id.toString(), this);
    }
  }

  static load(id: string): AirLiquidityPoolOutputTokenStats | null {
    return changetype<AirLiquidityPoolOutputTokenStats | null>(
      store.get("AirLiquidityPoolOutputTokenStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidityPoolStatsRef(): string {
    let value = this.get("liquidityPoolStatsRef");
    return value!.toString();
  }

  set liquidityPoolStatsRef(value: string) {
    this.set("liquidityPoolStatsRef", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get walletCount(): BigInt {
    let value = this.get("walletCount");
    return value!.toBigInt();
  }

  set walletCount(value: BigInt) {
    this.set("walletCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value!.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get transactionCount(): BigInt {
    let value = this.get("transactionCount");
    return value!.toBigInt();
  }

  set transactionCount(value: BigInt) {
    this.set("transactionCount", Value.fromBigInt(value));
  }

  get volumeInUSD(): BigDecimal {
    let value = this.get("volumeInUSD");
    return value!.toBigDecimal();
  }

  set volumeInUSD(value: BigDecimal) {
    this.set("volumeInUSD", Value.fromBigDecimal(value));
  }

  get dailyChange(): string {
    let value = this.get("dailyChange");
    return value!.toString();
  }

  set dailyChange(value: string) {
    this.set("dailyChange", Value.fromString(value));
  }

  get extraData(): Array<string> | null {
    let value = this.get("extraData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set extraData(value: Array<string> | null) {
    if (!value) {
      this.unset("extraData");
    } else {
      this.set("extraData", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class AirLiquidityPoolTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dexPool", Value.fromString(""));
    this.set("liquidityPoolStatsRef", Value.fromString(""));
    this.set("hash", Value.fromString(""));
    this.set("inputTokenTransfers", Value.fromStringArray(new Array(0)));
    this.set("outputTokenTransfer", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirLiquidityPoolTransaction entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirLiquidityPoolTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirLiquidityPoolTransaction", id.toString(), this);
    }
  }

  static load(id: string): AirLiquidityPoolTransaction | null {
    return changetype<AirLiquidityPoolTransaction | null>(
      store.get("AirLiquidityPoolTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dexPool(): string {
    let value = this.get("dexPool");
    return value!.toString();
  }

  set dexPool(value: string) {
    this.set("dexPool", Value.fromString(value));
  }

  get liquidityPoolStatsRef(): string {
    let value = this.get("liquidityPoolStatsRef");
    return value!.toString();
  }

  set liquidityPoolStatsRef(value: string) {
    this.set("liquidityPoolStatsRef", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get inputTokenTransfers(): Array<string> {
    let value = this.get("inputTokenTransfers");
    return value!.toStringArray();
  }

  set inputTokenTransfers(value: Array<string>) {
    this.set("inputTokenTransfers", Value.fromStringArray(value));
  }

  get outputTokenTransfer(): string {
    let value = this.get("outputTokenTransfer");
    return value!.toString();
  }

  set outputTokenTransfer(value: string) {
    this.set("outputTokenTransfer", Value.fromString(value));
  }
}

export class AirTokenTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("from", Value.fromString(""));
    this.set("to", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirTokenTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirTokenTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirTokenTransfer", id.toString(), this);
    }
  }

  static load(id: string): AirTokenTransfer | null {
    return changetype<AirTokenTransfer | null>(
      store.get("AirTokenTransfer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get fee(): BigInt | null {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fee(value: BigInt | null) {
    if (!value) {
      this.unset("fee");
    } else {
      this.set("fee", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class AirPoolFarmRewardStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dexPool", Value.fromString(""));
    this.set("transactions", Value.fromStringArray(new Array(0)));
    this.set("walletCount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenCount", Value.fromBigInt(BigInt.zero()));
    this.set("transactionCount", Value.fromBigInt(BigInt.zero()));
    this.set("volumeInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyChange", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirPoolFarmRewardStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirPoolFarmRewardStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirPoolFarmRewardStats", id.toString(), this);
    }
  }

  static load(id: string): AirPoolFarmRewardStats | null {
    return changetype<AirPoolFarmRewardStats | null>(
      store.get("AirPoolFarmRewardStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dexPool(): string {
    let value = this.get("dexPool");
    return value!.toString();
  }

  set dexPool(value: string) {
    this.set("dexPool", Value.fromString(value));
  }

  get inputTokenStats(): Array<string> | null {
    let value = this.get("inputTokenStats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set inputTokenStats(value: Array<string> | null) {
    if (!value) {
      this.unset("inputTokenStats");
    } else {
      this.set("inputTokenStats", Value.fromStringArray(<Array<string>>value));
    }
  }

  get outputTokensStats(): Array<string> | null {
    let value = this.get("outputTokensStats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set outputTokensStats(value: Array<string> | null) {
    if (!value) {
      this.unset("outputTokensStats");
    } else {
      this.set(
        "outputTokensStats",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }

  get walletCount(): BigInt {
    let value = this.get("walletCount");
    return value!.toBigInt();
  }

  set walletCount(value: BigInt) {
    this.set("walletCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value!.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get transactionCount(): BigInt {
    let value = this.get("transactionCount");
    return value!.toBigInt();
  }

  set transactionCount(value: BigInt) {
    this.set("transactionCount", Value.fromBigInt(value));
  }

  get volumeInUSD(): BigDecimal {
    let value = this.get("volumeInUSD");
    return value!.toBigDecimal();
  }

  set volumeInUSD(value: BigDecimal) {
    this.set("volumeInUSD", Value.fromBigDecimal(value));
  }

  get dailyChange(): string {
    let value = this.get("dailyChange");
    return value!.toString();
  }

  set dailyChange(value: string) {
    this.set("dailyChange", Value.fromString(value));
  }

  get extraData(): Array<string> | null {
    let value = this.get("extraData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set extraData(value: Array<string> | null) {
    if (!value) {
      this.unset("extraData");
    } else {
      this.set("extraData", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class AirPoolFarmTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hash", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirPoolFarmTransaction entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirPoolFarmTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirPoolFarmTransaction", id.toString(), this);
    }
  }

  static load(id: string): AirPoolFarmTransaction | null {
    return changetype<AirPoolFarmTransaction | null>(
      store.get("AirPoolFarmTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get inputToken(): string | null {
    let value = this.get("inputToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set inputToken(value: string | null) {
    if (!value) {
      this.unset("inputToken");
    } else {
      this.set("inputToken", Value.fromString(<string>value));
    }
  }

  get outputToken(): string | null {
    let value = this.get("outputToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outputToken(value: string | null) {
    if (!value) {
      this.unset("outputToken");
    } else {
      this.set("outputToken", Value.fromString(<string>value));
    }
  }

  get inputAmount(): BigInt | null {
    let value = this.get("inputAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set inputAmount(value: BigInt | null) {
    if (!value) {
      this.unset("inputAmount");
    } else {
      this.set("inputAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get outputAmount(): BigInt | null {
    let value = this.get("outputAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outputAmount(value: BigInt | null) {
    if (!value) {
      this.unset("outputAmount");
    } else {
      this.set("outputAmount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class AirDEXSwapStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dexPool", Value.fromString(""));
    this.set("walletCount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenCount", Value.fromBigInt(BigInt.zero()));
    this.set("transactionCount", Value.fromBigInt(BigInt.zero()));
    this.set("volumeInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyChange", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirDEXSwapStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirDEXSwapStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirDEXSwapStats", id.toString(), this);
    }
  }

  static load(id: string): AirDEXSwapStats | null {
    return changetype<AirDEXSwapStats | null>(store.get("AirDEXSwapStats", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dexPool(): string {
    let value = this.get("dexPool");
    return value!.toString();
  }

  set dexPool(value: string) {
    this.set("dexPool", Value.fromString(value));
  }

  get inputTokensStats(): Array<string> {
    let value = this.get("inputTokensStats");
    return value!.toStringArray();
  }

  set inputTokensStats(value: Array<string>) {
    this.set("inputTokensStats", Value.fromStringArray(value));
  }

  get outputTokenStats(): Array<string> {
    let value = this.get("outputTokenStats");
    return value!.toStringArray();
  }

  set outputTokenStats(value: Array<string>) {
    this.set("outputTokenStats", Value.fromStringArray(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }

  get walletCount(): BigInt {
    let value = this.get("walletCount");
    return value!.toBigInt();
  }

  set walletCount(value: BigInt) {
    this.set("walletCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value!.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get transactionCount(): BigInt {
    let value = this.get("transactionCount");
    return value!.toBigInt();
  }

  set transactionCount(value: BigInt) {
    this.set("transactionCount", Value.fromBigInt(value));
  }

  get volumeInUSD(): BigDecimal {
    let value = this.get("volumeInUSD");
    return value!.toBigDecimal();
  }

  set volumeInUSD(value: BigDecimal) {
    this.set("volumeInUSD", Value.fromBigDecimal(value));
  }

  get dailyChange(): string {
    let value = this.get("dailyChange");
    return value!.toString();
  }

  set dailyChange(value: string) {
    this.set("dailyChange", Value.fromString(value));
  }

  get extraData(): Array<string> | null {
    let value = this.get("extraData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set extraData(value: Array<string> | null) {
    if (!value) {
      this.unset("extraData");
    } else {
      this.set("extraData", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class AirSwapInputTokenStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("swapStatsRef", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("walletCount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenCount", Value.fromBigInt(BigInt.zero()));
    this.set("transactionCount", Value.fromBigInt(BigInt.zero()));
    this.set("volumeInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyChange", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirSwapInputTokenStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirSwapInputTokenStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirSwapInputTokenStats", id.toString(), this);
    }
  }

  static load(id: string): AirSwapInputTokenStats | null {
    return changetype<AirSwapInputTokenStats | null>(
      store.get("AirSwapInputTokenStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get swapStatsRef(): string {
    let value = this.get("swapStatsRef");
    return value!.toString();
  }

  set swapStatsRef(value: string) {
    this.set("swapStatsRef", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get walletCount(): BigInt {
    let value = this.get("walletCount");
    return value!.toBigInt();
  }

  set walletCount(value: BigInt) {
    this.set("walletCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value!.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get transactionCount(): BigInt {
    let value = this.get("transactionCount");
    return value!.toBigInt();
  }

  set transactionCount(value: BigInt) {
    this.set("transactionCount", Value.fromBigInt(value));
  }

  get volumeInUSD(): BigDecimal {
    let value = this.get("volumeInUSD");
    return value!.toBigDecimal();
  }

  set volumeInUSD(value: BigDecimal) {
    this.set("volumeInUSD", Value.fromBigDecimal(value));
  }

  get dailyChange(): string {
    let value = this.get("dailyChange");
    return value!.toString();
  }

  set dailyChange(value: string) {
    this.set("dailyChange", Value.fromString(value));
  }

  get extraData(): Array<string> | null {
    let value = this.get("extraData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set extraData(value: Array<string> | null) {
    if (!value) {
      this.unset("extraData");
    } else {
      this.set("extraData", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class AirSwapOutputTokenStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("swapStatsRef", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("walletCount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenCount", Value.fromBigInt(BigInt.zero()));
    this.set("transactionCount", Value.fromBigInt(BigInt.zero()));
    this.set("volumeInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyChange", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirSwapOutputTokenStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirSwapOutputTokenStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirSwapOutputTokenStats", id.toString(), this);
    }
  }

  static load(id: string): AirSwapOutputTokenStats | null {
    return changetype<AirSwapOutputTokenStats | null>(
      store.get("AirSwapOutputTokenStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get swapStatsRef(): string {
    let value = this.get("swapStatsRef");
    return value!.toString();
  }

  set swapStatsRef(value: string) {
    this.set("swapStatsRef", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get walletCount(): BigInt {
    let value = this.get("walletCount");
    return value!.toBigInt();
  }

  set walletCount(value: BigInt) {
    this.set("walletCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value!.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get transactionCount(): BigInt {
    let value = this.get("transactionCount");
    return value!.toBigInt();
  }

  set transactionCount(value: BigInt) {
    this.set("transactionCount", Value.fromBigInt(value));
  }

  get volumeInUSD(): BigDecimal {
    let value = this.get("volumeInUSD");
    return value!.toBigDecimal();
  }

  set volumeInUSD(value: BigDecimal) {
    this.set("volumeInUSD", Value.fromBigDecimal(value));
  }

  get dailyChange(): string {
    let value = this.get("dailyChange");
    return value!.toString();
  }

  set dailyChange(value: string) {
    this.set("dailyChange", Value.fromString(value));
  }

  get extraData(): Array<string> | null {
    let value = this.get("extraData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set extraData(value: Array<string> | null) {
    if (!value) {
      this.unset("extraData");
    } else {
      this.set("extraData", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class AirDEXSwapTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dexPool", Value.fromString(""));
    this.set("swapStatsRef", Value.fromString(""));
    this.set("hash", Value.fromString(""));
    this.set("inputTokenTransfer", Value.fromString(""));
    this.set("outputTokenTransfer", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirDEXSwapTransaction entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirDEXSwapTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirDEXSwapTransaction", id.toString(), this);
    }
  }

  static load(id: string): AirDEXSwapTransaction | null {
    return changetype<AirDEXSwapTransaction | null>(
      store.get("AirDEXSwapTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dexPool(): string {
    let value = this.get("dexPool");
    return value!.toString();
  }

  set dexPool(value: string) {
    this.set("dexPool", Value.fromString(value));
  }

  get swapStatsRef(): string {
    let value = this.get("swapStatsRef");
    return value!.toString();
  }

  set swapStatsRef(value: string) {
    this.set("swapStatsRef", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get inputTokenTransfer(): string {
    let value = this.get("inputTokenTransfer");
    return value!.toString();
  }

  set inputTokenTransfer(value: string) {
    this.set("inputTokenTransfer", Value.fromString(value));
  }

  get outputTokenTransfer(): string {
    let value = this.get("outputTokenTransfer");
    return value!.toString();
  }

  set outputTokenTransfer(value: string) {
    this.set("outputTokenTransfer", Value.fromString(value));
  }
}

export class AirNFTSaleStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("walletCount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenCount", Value.fromBigInt(BigInt.zero()));
    this.set("transactionCount", Value.fromBigInt(BigInt.zero()));
    this.set("volumeInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyChange", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirNFTSaleStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirNFTSaleStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirNFTSaleStats", id.toString(), this);
    }
  }

  static load(id: string): AirNFTSaleStats | null {
    return changetype<AirNFTSaleStats | null>(store.get("AirNFTSaleStats", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }

  get walletCount(): BigInt {
    let value = this.get("walletCount");
    return value!.toBigInt();
  }

  set walletCount(value: BigInt) {
    this.set("walletCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value!.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get transactionCount(): BigInt {
    let value = this.get("transactionCount");
    return value!.toBigInt();
  }

  set transactionCount(value: BigInt) {
    this.set("transactionCount", Value.fromBigInt(value));
  }

  get volumeInUSD(): BigDecimal {
    let value = this.get("volumeInUSD");
    return value!.toBigDecimal();
  }

  set volumeInUSD(value: BigDecimal) {
    this.set("volumeInUSD", Value.fromBigDecimal(value));
  }

  get dailyChange(): string {
    let value = this.get("dailyChange");
    return value!.toString();
  }

  set dailyChange(value: string) {
    this.set("dailyChange", Value.fromString(value));
  }

  get extraData(): Array<string> | null {
    let value = this.get("extraData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set extraData(value: Array<string> | null) {
    if (!value) {
      this.unset("extraData");
    } else {
      this.set("extraData", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class AirNFTSaleTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hash", Value.fromString(""));
    this.set("saleStat", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("to", Value.fromString(""));
    this.set("from", Value.fromString(""));
    this.set("transactionToken", Value.fromString(""));
    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirNFTSaleTransaction entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirNFTSaleTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirNFTSaleTransaction", id.toString(), this);
    }
  }

  static load(id: string): AirNFTSaleTransaction | null {
    return changetype<AirNFTSaleTransaction | null>(
      store.get("AirNFTSaleTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get saleStat(): string {
    let value = this.get("saleStat");
    return value!.toString();
  }

  set saleStat(value: string) {
    this.set("saleStat", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get transactionToken(): string {
    let value = this.get("transactionToken");
    return value!.toString();
  }

  set transactionToken(value: string) {
    this.set("transactionToken", Value.fromString(value));
  }

  get paymentToken(): string | null {
    let value = this.get("paymentToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set paymentToken(value: string | null) {
    if (!value) {
      this.unset("paymentToken");
    } else {
      this.set("paymentToken", Value.fromString(<string>value));
    }
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get paymentAmount(): BigInt | null {
    let value = this.get("paymentAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set paymentAmount(value: BigInt | null) {
    if (!value) {
      this.unset("paymentAmount");
    } else {
      this.set("paymentAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get fees(): BigInt | null {
    let value = this.get("fees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fees(value: BigInt | null) {
    if (!value) {
      this.unset("fees");
    } else {
      this.set("fees", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenMetadata(): string | null {
    let value = this.get("tokenMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenMetadata(value: string | null) {
    if (!value) {
      this.unset("tokenMetadata");
    } else {
      this.set("tokenMetadata", Value.fromString(<string>value));
    }
  }
}

export class AirMeta extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("daySinceEpoch", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirMeta entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirMeta must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirMeta", id.toString(), this);
    }
  }

  static load(id: string): AirMeta | null {
    return changetype<AirMeta | null>(store.get("AirMeta", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get daySinceEpoch(): BigInt {
    let value = this.get("daySinceEpoch");
    return value!.toBigInt();
  }

  set daySinceEpoch(value: BigInt) {
    this.set("daySinceEpoch", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}
