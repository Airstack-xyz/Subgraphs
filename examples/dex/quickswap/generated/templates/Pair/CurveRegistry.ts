// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PoolAdded extends ethereum.Event {
  get params(): PoolAdded__Params {
    return new PoolAdded__Params(this);
  }
}

export class PoolAdded__Params {
  _event: PoolAdded;

  constructor(event: PoolAdded) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rate_method_id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class PoolRemoved extends ethereum.Event {
  get params(): PoolRemoved__Params {
    return new PoolRemoved__Params(this);
  }
}

export class PoolRemoved__Params {
  _event: PoolRemoved;

  constructor(event: PoolRemoved) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CurveRegistry__get_gaugesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigIntArray(this.value1));
    return map;
  }
}

export class CurveRegistry__get_parametersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class CurveRegistry__get_coin_indicesResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class CurveRegistry extends ethereum.SmartContract {
  static bind(address: Address): CurveRegistry {
    return new CurveRegistry("CurveRegistry", address);
  }

  find_pool_for_coins(_from: Address, _to: Address): Address {
    let result = super.call(
      "find_pool_for_coins",
      "find_pool_for_coins(address,address):(address)",
      [ethereum.Value.fromAddress(_from), ethereum.Value.fromAddress(_to)]
    );

    return result[0].toAddress();
  }

  try_find_pool_for_coins(
    _from: Address,
    _to: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "find_pool_for_coins",
      "find_pool_for_coins(address,address):(address)",
      [ethereum.Value.fromAddress(_from), ethereum.Value.fromAddress(_to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  find_pool_for_coins1(_from: Address, _to: Address, i: BigInt): Address {
    let result = super.call(
      "find_pool_for_coins",
      "find_pool_for_coins(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );

    return result[0].toAddress();
  }

  try_find_pool_for_coins1(
    _from: Address,
    _to: Address,
    i: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "find_pool_for_coins",
      "find_pool_for_coins(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  get_n_coins(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_n_coins",
      "get_n_coins(address):(uint256[2])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_n_coins(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_n_coins",
      "get_n_coins(address):(uint256[2])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_coins(_pool: Address): Array<Address> {
    let result = super.call("get_coins", "get_coins(address):(address[8])", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toAddressArray();
  }

  try_get_coins(_pool: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("get_coins", "get_coins(address):(address[8])", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  get_underlying_coins(_pool: Address): Array<Address> {
    let result = super.call(
      "get_underlying_coins",
      "get_underlying_coins(address):(address[8])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toAddressArray();
  }

  try_get_underlying_coins(
    _pool: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "get_underlying_coins",
      "get_underlying_coins(address):(address[8])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  get_decimals(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_decimals",
      "get_decimals(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_decimals(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_decimals",
      "get_decimals(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_underlying_decimals(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_underlying_decimals",
      "get_underlying_decimals(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_underlying_decimals(
    _pool: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_underlying_decimals",
      "get_underlying_decimals(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_rates(_pool: Address): Array<BigInt> {
    let result = super.call("get_rates", "get_rates(address):(uint256[8])", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBigIntArray();
  }

  try_get_rates(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("get_rates", "get_rates(address):(uint256[8])", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_gauges(_pool: Address): CurveRegistry__get_gaugesResult {
    let result = super.call(
      "get_gauges",
      "get_gauges(address):(address[10],int128[10])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return new CurveRegistry__get_gaugesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_get_gauges(
    _pool: Address
  ): ethereum.CallResult<CurveRegistry__get_gaugesResult> {
    let result = super.tryCall(
      "get_gauges",
      "get_gauges(address):(address[10],int128[10])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CurveRegistry__get_gaugesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  get_balances(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_balances",
      "get_balances(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_balances(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_balances",
      "get_balances(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_underlying_balances(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_underlying_balances",
      "get_underlying_balances(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_underlying_balances(
    _pool: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_underlying_balances",
      "get_underlying_balances(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_virtual_price_from_lp_token(_token: Address): BigInt {
    let result = super.call(
      "get_virtual_price_from_lp_token",
      "get_virtual_price_from_lp_token(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_get_virtual_price_from_lp_token(
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_virtual_price_from_lp_token",
      "get_virtual_price_from_lp_token(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_A(_pool: Address): BigInt {
    let result = super.call("get_A", "get_A(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBigInt();
  }

  try_get_A(_pool: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("get_A", "get_A(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_parameters(_pool: Address): CurveRegistry__get_parametersResult {
    let result = super.call(
      "get_parameters",
      "get_parameters(address):(uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_pool)]
    );

    return new CurveRegistry__get_parametersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_get_parameters(
    _pool: Address
  ): ethereum.CallResult<CurveRegistry__get_parametersResult> {
    let result = super.tryCall(
      "get_parameters",
      "get_parameters(address):(uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CurveRegistry__get_parametersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  get_fees(_pool: Address): Array<BigInt> {
    let result = super.call("get_fees", "get_fees(address):(uint256[2])", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBigIntArray();
  }

  try_get_fees(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("get_fees", "get_fees(address):(uint256[2])", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_admin_balances(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_admin_balances",
      "get_admin_balances(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_admin_balances(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_admin_balances",
      "get_admin_balances(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_coin_indices(
    _pool: Address,
    _from: Address,
    _to: Address
  ): CurveRegistry__get_coin_indicesResult {
    let result = super.call(
      "get_coin_indices",
      "get_coin_indices(address,address,address):(int128,int128,bool)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    );

    return new CurveRegistry__get_coin_indicesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_get_coin_indices(
    _pool: Address,
    _from: Address,
    _to: Address
  ): ethereum.CallResult<CurveRegistry__get_coin_indicesResult> {
    let result = super.tryCall(
      "get_coin_indices",
      "get_coin_indices(address,address,address):(int128,int128,bool)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CurveRegistry__get_coin_indicesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }

  estimate_gas_used(_pool: Address, _from: Address, _to: Address): BigInt {
    let result = super.call(
      "estimate_gas_used",
      "estimate_gas_used(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    );

    return result[0].toBigInt();
  }

  try_estimate_gas_used(
    _pool: Address,
    _from: Address,
    _to: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimate_gas_used",
      "estimate_gas_used(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  address_provider(): Address {
    let result = super.call(
      "address_provider",
      "address_provider():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_address_provider(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "address_provider",
      "address_provider():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gauge_controller(): Address {
    let result = super.call(
      "gauge_controller",
      "gauge_controller():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_gauge_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gauge_controller",
      "gauge_controller():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool_list(arg0: BigInt): Address {
    let result = super.call("pool_list", "pool_list(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);

    return result[0].toAddress();
  }

  try_pool_list(arg0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("pool_list", "pool_list(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool_count(): BigInt {
    let result = super.call("pool_count", "pool_count():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pool_count(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pool_count", "pool_count():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_pool_from_lp_token(arg0: Address): Address {
    let result = super.call(
      "get_pool_from_lp_token",
      "get_pool_from_lp_token(address):(address)",
      [ethereum.Value.fromAddress(arg0)]
    );

    return result[0].toAddress();
  }

  try_get_pool_from_lp_token(arg0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "get_pool_from_lp_token",
      "get_pool_from_lp_token(address):(address)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  get_lp_token(arg0: Address): Address {
    let result = super.call("get_lp_token", "get_lp_token(address):(address)", [
      ethereum.Value.fromAddress(arg0)
    ]);

    return result[0].toAddress();
  }

  try_get_lp_token(arg0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "get_lp_token",
      "get_lp_token(address):(address)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _address_provider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gauge_controller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class Add_poolCall extends ethereum.Call {
  get inputs(): Add_poolCall__Inputs {
    return new Add_poolCall__Inputs(this);
  }

  get outputs(): Add_poolCall__Outputs {
    return new Add_poolCall__Outputs(this);
  }
}

export class Add_poolCall__Inputs {
  _call: Add_poolCall;

  constructor(call: Add_poolCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _n_coins(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lp_token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _rate_method_id(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _decimals(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _underlying_decimals(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _has_initial_A(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get _is_v1(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }
}

export class Add_poolCall__Outputs {
  _call: Add_poolCall;

  constructor(call: Add_poolCall) {
    this._call = call;
  }
}

export class Add_pool_without_underlyingCall extends ethereum.Call {
  get inputs(): Add_pool_without_underlyingCall__Inputs {
    return new Add_pool_without_underlyingCall__Inputs(this);
  }

  get outputs(): Add_pool_without_underlyingCall__Outputs {
    return new Add_pool_without_underlyingCall__Outputs(this);
  }
}

export class Add_pool_without_underlyingCall__Inputs {
  _call: Add_pool_without_underlyingCall;

  constructor(call: Add_pool_without_underlyingCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _n_coins(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lp_token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _rate_method_id(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _decimals(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _use_rates(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _has_initial_A(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get _is_v1(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }
}

export class Add_pool_without_underlyingCall__Outputs {
  _call: Add_pool_without_underlyingCall;

  constructor(call: Add_pool_without_underlyingCall) {
    this._call = call;
  }
}

export class Add_metapoolCall extends ethereum.Call {
  get inputs(): Add_metapoolCall__Inputs {
    return new Add_metapoolCall__Inputs(this);
  }

  get outputs(): Add_metapoolCall__Outputs {
    return new Add_metapoolCall__Outputs(this);
  }
}

export class Add_metapoolCall__Inputs {
  _call: Add_metapoolCall;

  constructor(call: Add_metapoolCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _n_coins(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lp_token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _decimals(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class Add_metapoolCall__Outputs {
  _call: Add_metapoolCall;

  constructor(call: Add_metapoolCall) {
    this._call = call;
  }
}

export class Remove_poolCall extends ethereum.Call {
  get inputs(): Remove_poolCall__Inputs {
    return new Remove_poolCall__Inputs(this);
  }

  get outputs(): Remove_poolCall__Outputs {
    return new Remove_poolCall__Outputs(this);
  }
}

export class Remove_poolCall__Inputs {
  _call: Remove_poolCall;

  constructor(call: Remove_poolCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Remove_poolCall__Outputs {
  _call: Remove_poolCall;

  constructor(call: Remove_poolCall) {
    this._call = call;
  }
}

export class Set_coin_gas_estimatesCall extends ethereum.Call {
  get inputs(): Set_coin_gas_estimatesCall__Inputs {
    return new Set_coin_gas_estimatesCall__Inputs(this);
  }

  get outputs(): Set_coin_gas_estimatesCall__Outputs {
    return new Set_coin_gas_estimatesCall__Outputs(this);
  }
}

export class Set_coin_gas_estimatesCall__Inputs {
  _call: Set_coin_gas_estimatesCall;

  constructor(call: Set_coin_gas_estimatesCall) {
    this._call = call;
  }

  get _addr(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amount(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class Set_coin_gas_estimatesCall__Outputs {
  _call: Set_coin_gas_estimatesCall;

  constructor(call: Set_coin_gas_estimatesCall) {
    this._call = call;
  }
}

export class Set_gas_estimate_contractCall extends ethereum.Call {
  get inputs(): Set_gas_estimate_contractCall__Inputs {
    return new Set_gas_estimate_contractCall__Inputs(this);
  }

  get outputs(): Set_gas_estimate_contractCall__Outputs {
    return new Set_gas_estimate_contractCall__Outputs(this);
  }
}

export class Set_gas_estimate_contractCall__Inputs {
  _call: Set_gas_estimate_contractCall;

  constructor(call: Set_gas_estimate_contractCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _estimator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Set_gas_estimate_contractCall__Outputs {
  _call: Set_gas_estimate_contractCall;

  constructor(call: Set_gas_estimate_contractCall) {
    this._call = call;
  }
}

export class Set_liquidity_gaugesCall extends ethereum.Call {
  get inputs(): Set_liquidity_gaugesCall__Inputs {
    return new Set_liquidity_gaugesCall__Inputs(this);
  }

  get outputs(): Set_liquidity_gaugesCall__Outputs {
    return new Set_liquidity_gaugesCall__Outputs(this);
  }
}

export class Set_liquidity_gaugesCall__Inputs {
  _call: Set_liquidity_gaugesCall;

  constructor(call: Set_liquidity_gaugesCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _liquidity_gauges(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class Set_liquidity_gaugesCall__Outputs {
  _call: Set_liquidity_gaugesCall;

  constructor(call: Set_liquidity_gaugesCall) {
    this._call = call;
  }
}
