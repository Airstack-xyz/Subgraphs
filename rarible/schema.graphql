type Transaction @entity {
  " hash-nftAddress-id "
  id: ID!
  exchange: String
  hash: String
  from: String
  to: String
  nftAddress: String
  nftId: BigInt
  nftAmount: BigInt
  paymentToken: String
  paymentAmount: BigInt
  blockHeight: BigInt
  paymentTokenId: BigInt
  nft: String
  nftType: String
  nftTypeId: BigInt
}

enum AirNetwork {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BOBA
  BSC # aka BNB Chain
  CELO
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  XDAI # aka Gnosis Chain
}
enum AirProtocolType {
  GENERIC
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  DAO
  NFT_MARKET_PLACE
  STAKING
  P2E #play to earn
  LAUNCHPAD
}
enum AirTokenStandardType {
  ERC1155
  ERC721
  ERC20
}
enum AirTokenUsageType {
  POOL
  LP
  REWARD
  STAKE
  MINT
  GENERIC
}

type AirContract @entity {
  id: ID!
  address: String!
}

type AirToken @entity {
  id: ID!
  address: String!
  standard: AirTokenStandardType!
  name: String
  symbol: String
  decimals: Int
  totalSupply: BigInt
}

type AirTokenMetadata @entity {
  id: ID!
  displayContentType: AirTokenDisplayType!
  displayContent: String
}

enum AirProtocolActionType {
  ### NFT Marketplace/Tokens ###
  BUY
  SELL
  MINT
  BURN # TODO check this later
  ### NFT (ex: Poap) ###
  ATTEND
  ### P2E (NFT + Utility) ###
  EARN
  ### DEX ###
  SWAP
  ADD_LIQUIDITY
  REMOVE_LIQUIDITY
  ADD_TO_FARM
  REMOVE_FROM_FARM
  CLAIM_FARM_REWARD
  ### Lending ###
  LEND
  BORROW
  FLASH_LOAN
  ### Staking / Delegating ###
  STAKE
  RESTAKE
  UNSTAKE
  DELEGATE
  CLAIM_REWARDS
}
enum AirTokenDisplayType {
  IMAGE
  VIDEO
  AUDIO
  TEXT_IMAGE
  TEXT
}
type AirExtraData @entity {
  id: ID!
  name: String!
  value: String!
}
interface AirEntityStats {
  walletCount: BigInt!
  tokenCount: BigInt!
  transactionCount: BigInt! # number of transactions (not unique)
  volumeInUSD: BigDecimal! # call price oracle and get the data and +
  #dailyChange: AirEntityDailyChangeStats!
  extraData: [AirExtraData!]
}
type AirDailyAggregateEntity implements AirEntityStats @entity {
  id: ID!
  network: AirNetwork!
  contract: AirContract!
  protocolType: AirProtocolType!
  protocolActionType: AirProtocolActionType!
  daySinceEpoch: BigInt!
  startDayTimestamp: BigInt!
  updatedTimestamp: BigInt!
  accounts: [AirDailyAggregateEntityAccount!]
    @derivedFrom(field: "dailyAggregatedEntity")
  stats: AirDailyAggregateEntityStats!

  walletCount: BigInt!
  tokenCount: BigInt!
  transactionCount: BigInt! # number of transactions (not unique)
  volumeInUSD: BigDecimal! # call price oracle and get the data and +
  #dailyChange: AirEntityDailyChangeStats!
  blockHeight: BigInt!

  extraData: [AirExtraData!]
}

type AirDailyAggregateEntityAccount @entity {
  id: ID!
  account: AirAccount!
  dailyAggregatedEntity: AirDailyAggregateEntity!
  volumeInUSD: BigDecimal!
  index: BigInt! # incrementer for pagination purpose
}

type AirAccount @entity {
  id: ID!
  address: String!
  dailyAggregatedEntities: [AirDailyAggregateEntityAccount!]
    @derivedFrom(field: "account")
}

type AirDailyAggregateEntityStats @entity {
  id: ID!
  protocolActionType: AirProtocolActionType!
  #### NFT Market Place
  saleStat: AirNFTSaleStats
  # mintStats: AirNFTSaleStats
  # giftStats: AirNFTSaleStats
}

enum AirNFTTransactionType {
  SALE
  MINT
  GIFT
}

type AirNFTSaleStats implements AirEntityStats @entity {
  id: ID!
  token: AirToken!
  # todo: Please check if the derived from can work here.
  transactions: [AirNFTSaleTransaction!]! @derivedFrom(field: "saleStat")

  walletCount: BigInt!
  tokenCount: BigInt!
  transactionCount: BigInt! # number of transactions (not unique)
  volumeInUSD: BigDecimal! # call price oracle and get the data and +
  #dailyChange: AirEntityDailyChangeStats!
  extraData: [AirExtraData!]
}

type AirNFTSaleTransaction @entity {
  id: ID!
  hash: String!
  saleStat: AirNFTSaleStats!
  type: AirNFTTransactionType!
  to: AirAccount! #Buyer
  from: AirAccount! #Seller
  transactionToken: AirToken!
  paymentToken: AirToken
  tokenId: BigInt!
  paymentAmount: BigInt
  fees: BigInt
  tokenMetadata: AirTokenMetadata
}
