// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CalculationsSushiSwap extends ethereum.SmartContract {
  static bind(address: Address): CalculationsSushiSwap {
    return new CalculationsSushiSwap("CalculationsSushiSwap", address);
  }

  getLpTokenPriceUsdc(tokenAddress: Address): BigInt {
    let result = super.call(
      "getLpTokenPriceUsdc",
      "getLpTokenPriceUsdc(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_getLpTokenPriceUsdc(tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLpTokenPriceUsdc",
      "getLpTokenPriceUsdc(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLpTokenTotalLiquidityUsdc(tokenAddress: Address): BigInt {
    let result = super.call(
      "getLpTokenTotalLiquidityUsdc",
      "getLpTokenTotalLiquidityUsdc(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_getLpTokenTotalLiquidityUsdc(
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLpTokenTotalLiquidityUsdc",
      "getLpTokenTotalLiquidityUsdc(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceFromRouter(token0Address: Address, token1Address: Address): BigInt {
    let result = super.call(
      "getPriceFromRouter",
      "getPriceFromRouter(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(token0Address),
        ethereum.Value.fromAddress(token1Address)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPriceFromRouter(
    token0Address: Address,
    token1Address: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriceFromRouter",
      "getPriceFromRouter(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(token0Address),
        ethereum.Value.fromAddress(token1Address)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceFromRouterUsdc(tokenAddress: Address): BigInt {
    let result = super.call(
      "getPriceFromRouterUsdc",
      "getPriceFromRouterUsdc(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_getPriceFromRouterUsdc(
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriceFromRouterUsdc",
      "getPriceFromRouterUsdc(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceUsdc(tokenAddress: Address): BigInt {
    let result = super.call("getPriceUsdc", "getPriceUsdc(address):(uint256)", [
      ethereum.Value.fromAddress(tokenAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getPriceUsdc(tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriceUsdc",
      "getPriceUsdc(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRouterForLpToken(tokenAddress: Address): Address {
    let result = super.call(
      "getRouterForLpToken",
      "getRouterForLpToken(address):(address)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toAddress();
  }

  try_getRouterForLpToken(tokenAddress: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRouterForLpToken",
      "getRouterForLpToken(address):(address)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isLpToken(tokenAddress: Address): boolean {
    let result = super.call("isLpToken", "isLpToken(address):(bool)", [
      ethereum.Value.fromAddress(tokenAddress)
    ]);

    return result[0].toBoolean();
  }

  try_isLpToken(tokenAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLpToken", "isLpToken(address):(bool)", [
      ethereum.Value.fromAddress(tokenAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  primaryFactoryAddress(): Address {
    let result = super.call(
      "primaryFactoryAddress",
      "primaryFactoryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_primaryFactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "primaryFactoryAddress",
      "primaryFactoryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  primaryRouterAddress(): Address {
    let result = super.call(
      "primaryRouterAddress",
      "primaryRouterAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_primaryRouterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "primaryRouterAddress",
      "primaryRouterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  secondaryFactoryAddress(): Address {
    let result = super.call(
      "secondaryFactoryAddress",
      "secondaryFactoryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_secondaryFactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "secondaryFactoryAddress",
      "secondaryFactoryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  secondaryRouterAddress(): Address {
    let result = super.call(
      "secondaryRouterAddress",
      "secondaryRouterAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_secondaryRouterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "secondaryRouterAddress",
      "secondaryRouterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usdcAddress(): Address {
    let result = super.call("usdcAddress", "usdcAddress():(address)", []);

    return result[0].toAddress();
  }

  try_usdcAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdcAddress", "usdcAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wethAddress(): Address {
    let result = super.call("wethAddress", "wethAddress():(address)", []);

    return result[0].toAddress();
  }

  try_wethAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("wethAddress", "wethAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _primaryRouterAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _primaryFactoryAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _secondaryRouterAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _secondaryFactoryAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _usdcAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
