// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PoolAdded extends ethereum.Event {
  get params(): PoolAdded__Params {
    return new PoolAdded__Params(this);
  }
}

export class PoolAdded__Params {
  _event: PoolAdded;

  constructor(event: PoolAdded) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolRemoved extends ethereum.Event {
  get params(): PoolRemoved__Params {
    return new PoolRemoved__Params(this);
  }
}

export class PoolRemoved__Params {
  _event: PoolRemoved;

  constructor(event: PoolRemoved) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CurvePoolRegistry__get_gaugesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigIntArray(this.value1));
    return map;
  }
}

export class CurvePoolRegistry__get_coin_indicesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CurvePoolRegistry extends ethereum.SmartContract {
  static bind(address: Address): CurvePoolRegistry {
    return new CurvePoolRegistry("CurvePoolRegistry", address);
  }

  find_pool_for_coins(_from: Address, _to: Address): Address {
    let result = super.call(
      "find_pool_for_coins",
      "find_pool_for_coins(address,address):(address)",
      [ethereum.Value.fromAddress(_from), ethereum.Value.fromAddress(_to)]
    );

    return result[0].toAddress();
  }

  try_find_pool_for_coins(
    _from: Address,
    _to: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "find_pool_for_coins",
      "find_pool_for_coins(address,address):(address)",
      [ethereum.Value.fromAddress(_from), ethereum.Value.fromAddress(_to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  find_pool_for_coins1(_from: Address, _to: Address, i: BigInt): Address {
    let result = super.call(
      "find_pool_for_coins",
      "find_pool_for_coins(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );

    return result[0].toAddress();
  }

  try_find_pool_for_coins1(
    _from: Address,
    _to: Address,
    i: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "find_pool_for_coins",
      "find_pool_for_coins(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  get_n_coins(_pool: Address): BigInt {
    let result = super.call("get_n_coins", "get_n_coins(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBigInt();
  }

  try_get_n_coins(_pool: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_n_coins",
      "get_n_coins(address):(uint256)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_coins(_pool: Address): Array<Address> {
    let result = super.call("get_coins", "get_coins(address):(address[8])", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toAddressArray();
  }

  try_get_coins(_pool: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("get_coins", "get_coins(address):(address[8])", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  get_decimals(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_decimals",
      "get_decimals(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_decimals(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_decimals",
      "get_decimals(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_gauges(_pool: Address): CurvePoolRegistry__get_gaugesResult {
    let result = super.call(
      "get_gauges",
      "get_gauges(address):(address[10],int128[10])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return new CurvePoolRegistry__get_gaugesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_get_gauges(
    _pool: Address
  ): ethereum.CallResult<CurvePoolRegistry__get_gaugesResult> {
    let result = super.tryCall(
      "get_gauges",
      "get_gauges(address):(address[10],int128[10])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CurvePoolRegistry__get_gaugesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  get_balances(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_balances",
      "get_balances(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_balances(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_balances",
      "get_balances(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_virtual_price_from_lp_token(_token: Address): BigInt {
    let result = super.call(
      "get_virtual_price_from_lp_token",
      "get_virtual_price_from_lp_token(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_get_virtual_price_from_lp_token(
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_virtual_price_from_lp_token",
      "get_virtual_price_from_lp_token(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_A(_pool: Address): BigInt {
    let result = super.call("get_A", "get_A(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBigInt();
  }

  try_get_A(_pool: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("get_A", "get_A(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_D(_pool: Address): BigInt {
    let result = super.call("get_D", "get_D(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBigInt();
  }

  try_get_D(_pool: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("get_D", "get_D(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_gamma(_pool: Address): BigInt {
    let result = super.call("get_gamma", "get_gamma(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBigInt();
  }

  try_get_gamma(_pool: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("get_gamma", "get_gamma(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_fees(_pool: Address): Array<BigInt> {
    let result = super.call("get_fees", "get_fees(address):(uint256[4])", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBigIntArray();
  }

  try_get_fees(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("get_fees", "get_fees(address):(uint256[4])", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_admin_balances(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_admin_balances",
      "get_admin_balances(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_admin_balances(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_admin_balances",
      "get_admin_balances(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_coin_indices(
    _pool: Address,
    _from: Address,
    _to: Address
  ): CurvePoolRegistry__get_coin_indicesResult {
    let result = super.call(
      "get_coin_indices",
      "get_coin_indices(address,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    );

    return new CurvePoolRegistry__get_coin_indicesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_get_coin_indices(
    _pool: Address,
    _from: Address,
    _to: Address
  ): ethereum.CallResult<CurvePoolRegistry__get_coin_indicesResult> {
    let result = super.tryCall(
      "get_coin_indices",
      "get_coin_indices(address,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CurvePoolRegistry__get_coin_indicesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  get_pool_name(_pool: Address): string {
    let result = super.call(
      "get_pool_name",
      "get_pool_name(address):(string)",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toString();
  }

  try_get_pool_name(_pool: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "get_pool_name",
      "get_pool_name(address):(string)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  get_coin_swap_count(_coin: Address): BigInt {
    let result = super.call(
      "get_coin_swap_count",
      "get_coin_swap_count(address):(uint256)",
      [ethereum.Value.fromAddress(_coin)]
    );

    return result[0].toBigInt();
  }

  try_get_coin_swap_count(_coin: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_coin_swap_count",
      "get_coin_swap_count(address):(uint256)",
      [ethereum.Value.fromAddress(_coin)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_coin_swap_complement(_coin: Address, _index: BigInt): Address {
    let result = super.call(
      "get_coin_swap_complement",
      "get_coin_swap_complement(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_coin),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toAddress();
  }

  try_get_coin_swap_complement(
    _coin: Address,
    _index: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "get_coin_swap_complement",
      "get_coin_swap_complement(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_coin),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  address_provider(): Address {
    let result = super.call(
      "address_provider",
      "address_provider():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_address_provider(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "address_provider",
      "address_provider():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool_list(arg0: BigInt): Address {
    let result = super.call("pool_list", "pool_list(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);

    return result[0].toAddress();
  }

  try_pool_list(arg0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("pool_list", "pool_list(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool_count(): BigInt {
    let result = super.call("pool_count", "pool_count():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pool_count(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pool_count", "pool_count():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  coin_count(): BigInt {
    let result = super.call("coin_count", "coin_count():(uint256)", []);

    return result[0].toBigInt();
  }

  try_coin_count(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("coin_count", "coin_count():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_coin(arg0: BigInt): Address {
    let result = super.call("get_coin", "get_coin(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);

    return result[0].toAddress();
  }

  try_get_coin(arg0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("get_coin", "get_coin(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  get_pool_from_lp_token(arg0: Address): Address {
    let result = super.call(
      "get_pool_from_lp_token",
      "get_pool_from_lp_token(address):(address)",
      [ethereum.Value.fromAddress(arg0)]
    );

    return result[0].toAddress();
  }

  try_get_pool_from_lp_token(arg0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "get_pool_from_lp_token",
      "get_pool_from_lp_token(address):(address)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  get_lp_token(arg0: Address): Address {
    let result = super.call("get_lp_token", "get_lp_token(address):(address)", [
      ethereum.Value.fromAddress(arg0)
    ]);

    return result[0].toAddress();
  }

  try_get_lp_token(arg0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "get_lp_token",
      "get_lp_token(address):(address)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  get_zap(arg0: Address): Address {
    let result = super.call("get_zap", "get_zap(address):(address)", [
      ethereum.Value.fromAddress(arg0)
    ]);

    return result[0].toAddress();
  }

  try_get_zap(arg0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("get_zap", "get_zap(address):(address)", [
      ethereum.Value.fromAddress(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  last_updated(): BigInt {
    let result = super.call("last_updated", "last_updated():(uint256)", []);

    return result[0].toBigInt();
  }

  try_last_updated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("last_updated", "last_updated():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _address_provider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class Add_poolCall extends ethereum.Call {
  get inputs(): Add_poolCall__Inputs {
    return new Add_poolCall__Inputs(this);
  }

  get outputs(): Add_poolCall__Outputs {
    return new Add_poolCall__Outputs(this);
  }
}

export class Add_poolCall__Inputs {
  _call: Add_poolCall;

  constructor(call: Add_poolCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _n_coins(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lp_token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _gauge(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _zap(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _decimals(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class Add_poolCall__Outputs {
  _call: Add_poolCall;

  constructor(call: Add_poolCall) {
    this._call = call;
  }
}

export class Remove_poolCall extends ethereum.Call {
  get inputs(): Remove_poolCall__Inputs {
    return new Remove_poolCall__Inputs(this);
  }

  get outputs(): Remove_poolCall__Outputs {
    return new Remove_poolCall__Outputs(this);
  }
}

export class Remove_poolCall__Inputs {
  _call: Remove_poolCall;

  constructor(call: Remove_poolCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Remove_poolCall__Outputs {
  _call: Remove_poolCall;

  constructor(call: Remove_poolCall) {
    this._call = call;
  }
}

export class Set_liquidity_gaugesCall extends ethereum.Call {
  get inputs(): Set_liquidity_gaugesCall__Inputs {
    return new Set_liquidity_gaugesCall__Inputs(this);
  }

  get outputs(): Set_liquidity_gaugesCall__Outputs {
    return new Set_liquidity_gaugesCall__Outputs(this);
  }
}

export class Set_liquidity_gaugesCall__Inputs {
  _call: Set_liquidity_gaugesCall;

  constructor(call: Set_liquidity_gaugesCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _liquidity_gauges(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class Set_liquidity_gaugesCall__Outputs {
  _call: Set_liquidity_gaugesCall;

  constructor(call: Set_liquidity_gaugesCall) {
    this._call = call;
  }
}

export class Batch_set_liquidity_gaugesCall extends ethereum.Call {
  get inputs(): Batch_set_liquidity_gaugesCall__Inputs {
    return new Batch_set_liquidity_gaugesCall__Inputs(this);
  }

  get outputs(): Batch_set_liquidity_gaugesCall__Outputs {
    return new Batch_set_liquidity_gaugesCall__Outputs(this);
  }
}

export class Batch_set_liquidity_gaugesCall__Inputs {
  _call: Batch_set_liquidity_gaugesCall;

  constructor(call: Batch_set_liquidity_gaugesCall) {
    this._call = call;
  }

  get _pools(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _liquidity_gauges(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class Batch_set_liquidity_gaugesCall__Outputs {
  _call: Batch_set_liquidity_gaugesCall;

  constructor(call: Batch_set_liquidity_gaugesCall) {
    this._call = call;
  }
}
