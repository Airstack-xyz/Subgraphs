// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CalculationsCurve extends ethereum.SmartContract {
  static bind(address: Address): CalculationsCurve {
    return new CalculationsCurve("CalculationsCurve", address);
  }

  curveAddressProviderAddress(): Address {
    let result = super.call(
      "curveAddressProviderAddress",
      "curveAddressProviderAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_curveAddressProviderAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "curveAddressProviderAddress",
      "curveAddressProviderAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  curveMetapoolFactoryAddress(): Address {
    let result = super.call(
      "curveMetapoolFactoryAddress",
      "curveMetapoolFactoryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_curveMetapoolFactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "curveMetapoolFactoryAddress",
      "curveMetapoolFactoryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  curveRegistryAddress(): Address {
    let result = super.call(
      "curveRegistryAddress",
      "curveRegistryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_curveRegistryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "curveRegistryAddress",
      "curveRegistryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBasePrice(curveLpTokenAddress: Address): BigInt {
    let result = super.call("getBasePrice", "getBasePrice(address):(uint256)", [
      ethereum.Value.fromAddress(curveLpTokenAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getBasePrice(curveLpTokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBasePrice",
      "getBasePrice(address):(uint256)",
      [ethereum.Value.fromAddress(curveLpTokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurvePriceUsdc(curveLpTokenAddress: Address): BigInt {
    let result = super.call(
      "getCurvePriceUsdc",
      "getCurvePriceUsdc(address):(uint256)",
      [ethereum.Value.fromAddress(curveLpTokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_getCurvePriceUsdc(
    curveLpTokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurvePriceUsdc",
      "getCurvePriceUsdc(address):(uint256)",
      [ethereum.Value.fromAddress(curveLpTokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPool(tokenAddress: Address): Address {
    let result = super.call("getPool", "getPool(address):(address)", [
      ethereum.Value.fromAddress(tokenAddress)
    ]);

    return result[0].toAddress();
  }

  try_getPool(tokenAddress: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getPool", "getPool(address):(address)", [
      ethereum.Value.fromAddress(tokenAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPriceUsdc(assetAddress: Address): BigInt {
    let result = super.call("getPriceUsdc", "getPriceUsdc(address):(uint256)", [
      ethereum.Value.fromAddress(assetAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getPriceUsdc(assetAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriceUsdc",
      "getPriceUsdc(address):(uint256)",
      [ethereum.Value.fromAddress(assetAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnderlyingCoinFromPool(poolAddress: Address): Address {
    let result = super.call(
      "getUnderlyingCoinFromPool",
      "getUnderlyingCoinFromPool(address):(address)",
      [ethereum.Value.fromAddress(poolAddress)]
    );

    return result[0].toAddress();
  }

  try_getUnderlyingCoinFromPool(
    poolAddress: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUnderlyingCoinFromPool",
      "getUnderlyingCoinFromPool(address):(address)",
      [ethereum.Value.fromAddress(poolAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVirtualPrice(curveLpTokenAddress: Address): BigInt {
    let result = super.call(
      "getVirtualPrice",
      "getVirtualPrice(address):(uint256)",
      [ethereum.Value.fromAddress(curveLpTokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_getVirtualPrice(
    curveLpTokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVirtualPrice",
      "getVirtualPrice(address):(uint256)",
      [ethereum.Value.fromAddress(curveLpTokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isBasicToken(tokenAddress: Address): boolean {
    let result = super.call("isBasicToken", "isBasicToken(address):(bool)", [
      ethereum.Value.fromAddress(tokenAddress)
    ]);

    return result[0].toBoolean();
  }

  try_isBasicToken(tokenAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBasicToken", "isBasicToken(address):(bool)", [
      ethereum.Value.fromAddress(tokenAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCurveLpToken(tokenAddress: Address): boolean {
    let result = super.call(
      "isCurveLpToken",
      "isCurveLpToken(address):(bool)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBoolean();
  }

  try_isCurveLpToken(tokenAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCurveLpToken",
      "isCurveLpToken(address):(bool)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  oracleAddress(): Address {
    let result = super.call("oracleAddress", "oracleAddress():(address)", []);

    return result[0].toAddress();
  }

  try_oracleAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oracleAddress",
      "oracleAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerAddress(): Address {
    let result = super.call("ownerAddress", "ownerAddress():(address)", []);

    return result[0].toAddress();
  }

  try_ownerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerAddress", "ownerAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _curveAddressProviderAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracleAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class UpdateSlotCall extends ethereum.Call {
  get inputs(): UpdateSlotCall__Inputs {
    return new UpdateSlotCall__Inputs(this);
  }

  get outputs(): UpdateSlotCall__Outputs {
    return new UpdateSlotCall__Outputs(this);
  }
}

export class UpdateSlotCall__Inputs {
  _call: UpdateSlotCall;

  constructor(call: UpdateSlotCall) {
    this._call = call;
  }

  get slot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateSlotCall__Outputs {
  _call: UpdateSlotCall;

  constructor(call: UpdateSlotCall) {
    this._call = call;
  }
}
