// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("decimals", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get lastPriceUSD(): BigDecimal | null {
    let value = this.get("lastPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lastPriceUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("lastPriceUSD");
    } else {
      this.set("lastPriceUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lastPriceBlockNumber(): BigInt | null {
    let value = this.get("lastPriceBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastPriceBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("lastPriceBlockNumber");
    } else {
      this.set("lastPriceBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class RewardToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RewardToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RewardToken", id.toString(), this);
    }
  }

  static load(id: string): RewardToken | null {
    return changetype<RewardToken | null>(store.get("RewardToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class LiquidityPoolFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("feePercentage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feeType", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityPoolFee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidityPoolFee entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidityPoolFee", id.toString(), this);
    }
  }

  static load(id: string): LiquidityPoolFee | null {
    return changetype<LiquidityPoolFee | null>(
      store.get("LiquidityPoolFee", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get feePercentage(): BigDecimal {
    let value = this.get("feePercentage");
    return value!.toBigDecimal();
  }

  set feePercentage(value: BigDecimal) {
    this.set("feePercentage", Value.fromBigDecimal(value));
  }

  get feeType(): string {
    let value = this.get("feeType");
    return value!.toString();
  }

  set feeType(value: string) {
    this.set("feeType", Value.fromString(value));
  }
}

export class DexAmmProtocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("slug", Value.fromString(""));
    this.set("schemaVersion", Value.fromString(""));
    this.set("subgraphVersion", Value.fromString(""));
    this.set("methodologyVersion", Value.fromString(""));
    this.set("network", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "cumulativeSupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeTotalRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("cumulativeUniqueUsers", Value.fromI32(0));
    this.set("totalPoolCount", Value.fromI32(0));
    this.set("_regenesis", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DexAmmProtocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DexAmmProtocol entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DexAmmProtocol", id.toString(), this);
    }
  }

  static load(id: string): DexAmmProtocol | null {
    return changetype<DexAmmProtocol | null>(store.get("DexAmmProtocol", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get slug(): string {
    let value = this.get("slug");
    return value!.toString();
  }

  set slug(value: string) {
    this.set("slug", Value.fromString(value));
  }

  get schemaVersion(): string {
    let value = this.get("schemaVersion");
    return value!.toString();
  }

  set schemaVersion(value: string) {
    this.set("schemaVersion", Value.fromString(value));
  }

  get subgraphVersion(): string {
    let value = this.get("subgraphVersion");
    return value!.toString();
  }

  set subgraphVersion(value: string) {
    this.set("subgraphVersion", Value.fromString(value));
  }

  get methodologyVersion(): string {
    let value = this.get("methodologyVersion");
    return value!.toString();
  }

  set methodologyVersion(value: string) {
    this.set("methodologyVersion", Value.fromString(value));
  }

  get network(): string {
    let value = this.get("network");
    return value!.toString();
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get protocolControlledValueUSD(): BigDecimal | null {
    let value = this.get("protocolControlledValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set protocolControlledValueUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("protocolControlledValueUSD");
    } else {
      this.set(
        "protocolControlledValueUSD",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get cumulativeVolumeUSD(): BigDecimal {
    let value = this.get("cumulativeVolumeUSD");
    return value!.toBigDecimal();
  }

  set cumulativeVolumeUSD(value: BigDecimal) {
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    return value!.toI32();
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get totalPoolCount(): i32 {
    let value = this.get("totalPoolCount");
    return value!.toI32();
  }

  set totalPoolCount(value: i32) {
    this.set("totalPoolCount", Value.fromI32(value));
  }

  get _regenesis(): boolean {
    let value = this.get("_regenesis");
    return value!.toBoolean();
  }

  set _regenesis(value: boolean) {
    this.set("_regenesis", Value.fromBoolean(value));
  }

  get dailyUsageMetrics(): Array<string> {
    let value = this.get("dailyUsageMetrics");
    return value!.toStringArray();
  }

  set dailyUsageMetrics(value: Array<string>) {
    this.set("dailyUsageMetrics", Value.fromStringArray(value));
  }

  get hourlyUsageMetrics(): Array<string> {
    let value = this.get("hourlyUsageMetrics");
    return value!.toStringArray();
  }

  set hourlyUsageMetrics(value: Array<string>) {
    this.set("hourlyUsageMetrics", Value.fromStringArray(value));
  }

  get financialMetrics(): Array<string> {
    let value = this.get("financialMetrics");
    return value!.toStringArray();
  }

  set financialMetrics(value: Array<string>) {
    this.set("financialMetrics", Value.fromStringArray(value));
  }

  get pools(): Array<string> {
    let value = this.get("pools");
    return value!.toStringArray();
  }

  set pools(value: Array<string>) {
    this.set("pools", Value.fromStringArray(value));
  }
}

export class UsageMetricsDailySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocol", Value.fromString(""));
    this.set("dailyActiveUsers", Value.fromI32(0));
    this.set("cumulativeUniqueUsers", Value.fromI32(0));
    this.set("dailyTransactionCount", Value.fromI32(0));
    this.set("dailyDepositCount", Value.fromI32(0));
    this.set("dailyWithdrawCount", Value.fromI32(0));
    this.set("dailySwapCount", Value.fromI32(0));
    this.set("totalPoolCount", Value.fromI32(0));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UsageMetricsDailySnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UsageMetricsDailySnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UsageMetricsDailySnapshot", id.toString(), this);
    }
  }

  static load(id: string): UsageMetricsDailySnapshot | null {
    return changetype<UsageMetricsDailySnapshot | null>(
      store.get("UsageMetricsDailySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get dailyActiveUsers(): i32 {
    let value = this.get("dailyActiveUsers");
    return value!.toI32();
  }

  set dailyActiveUsers(value: i32) {
    this.set("dailyActiveUsers", Value.fromI32(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    return value!.toI32();
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get dailyTransactionCount(): i32 {
    let value = this.get("dailyTransactionCount");
    return value!.toI32();
  }

  set dailyTransactionCount(value: i32) {
    this.set("dailyTransactionCount", Value.fromI32(value));
  }

  get dailyDepositCount(): i32 {
    let value = this.get("dailyDepositCount");
    return value!.toI32();
  }

  set dailyDepositCount(value: i32) {
    this.set("dailyDepositCount", Value.fromI32(value));
  }

  get dailyWithdrawCount(): i32 {
    let value = this.get("dailyWithdrawCount");
    return value!.toI32();
  }

  set dailyWithdrawCount(value: i32) {
    this.set("dailyWithdrawCount", Value.fromI32(value));
  }

  get dailySwapCount(): i32 {
    let value = this.get("dailySwapCount");
    return value!.toI32();
  }

  set dailySwapCount(value: i32) {
    this.set("dailySwapCount", Value.fromI32(value));
  }

  get totalPoolCount(): i32 {
    let value = this.get("totalPoolCount");
    return value!.toI32();
  }

  set totalPoolCount(value: i32) {
    this.set("totalPoolCount", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UsageMetricsHourlySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocol", Value.fromString(""));
    this.set("hourlyActiveUsers", Value.fromI32(0));
    this.set("cumulativeUniqueUsers", Value.fromI32(0));
    this.set("hourlyTransactionCount", Value.fromI32(0));
    this.set("hourlyDepositCount", Value.fromI32(0));
    this.set("hourlyWithdrawCount", Value.fromI32(0));
    this.set("hourlySwapCount", Value.fromI32(0));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UsageMetricsHourlySnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UsageMetricsHourlySnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UsageMetricsHourlySnapshot", id.toString(), this);
    }
  }

  static load(id: string): UsageMetricsHourlySnapshot | null {
    return changetype<UsageMetricsHourlySnapshot | null>(
      store.get("UsageMetricsHourlySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get hourlyActiveUsers(): i32 {
    let value = this.get("hourlyActiveUsers");
    return value!.toI32();
  }

  set hourlyActiveUsers(value: i32) {
    this.set("hourlyActiveUsers", Value.fromI32(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    return value!.toI32();
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get hourlyTransactionCount(): i32 {
    let value = this.get("hourlyTransactionCount");
    return value!.toI32();
  }

  set hourlyTransactionCount(value: i32) {
    this.set("hourlyTransactionCount", Value.fromI32(value));
  }

  get hourlyDepositCount(): i32 {
    let value = this.get("hourlyDepositCount");
    return value!.toI32();
  }

  set hourlyDepositCount(value: i32) {
    this.set("hourlyDepositCount", Value.fromI32(value));
  }

  get hourlyWithdrawCount(): i32 {
    let value = this.get("hourlyWithdrawCount");
    return value!.toI32();
  }

  set hourlyWithdrawCount(value: i32) {
    this.set("hourlyWithdrawCount", Value.fromI32(value));
  }

  get hourlySwapCount(): i32 {
    let value = this.get("hourlySwapCount");
    return value!.toI32();
  }

  set hourlySwapCount(value: i32) {
    this.set("hourlySwapCount", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class FinancialsDailySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocol", Value.fromString(""));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "dailySupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeSupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "dailyProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("dailyTotalRevenueUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "cumulativeTotalRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FinancialsDailySnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FinancialsDailySnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FinancialsDailySnapshot", id.toString(), this);
    }
  }

  static load(id: string): FinancialsDailySnapshot | null {
    return changetype<FinancialsDailySnapshot | null>(
      store.get("FinancialsDailySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get protocolControlledValueUSD(): BigDecimal | null {
    let value = this.get("protocolControlledValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set protocolControlledValueUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("protocolControlledValueUSD");
    } else {
      this.set(
        "protocolControlledValueUSD",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get dailyVolumeUSD(): BigDecimal {
    let value = this.get("dailyVolumeUSD");
    return value!.toBigDecimal();
  }

  set dailyVolumeUSD(value: BigDecimal) {
    this.set("dailyVolumeUSD", Value.fromBigDecimal(value));
  }

  get cumulativeVolumeUSD(): BigDecimal {
    let value = this.get("cumulativeVolumeUSD");
    return value!.toBigDecimal();
  }

  set cumulativeVolumeUSD(value: BigDecimal) {
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(value));
  }

  get dailySupplySideRevenueUSD(): BigDecimal {
    let value = this.get("dailySupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set dailySupplySideRevenueUSD(value: BigDecimal) {
    this.set("dailySupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("dailyProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set dailyProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("dailyProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyTotalRevenueUSD(): BigDecimal {
    let value = this.get("dailyTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set dailyTotalRevenueUSD(value: BigDecimal) {
    this.set("dailyTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class LiquidityPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocol", Value.fromString(""));
    this.set("inputTokens", Value.fromStringArray(new Array(0)));
    this.set("fees", Value.fromStringArray(new Array(0)));
    this.set("isSingleSided", Value.fromBoolean(false));
    this.set("createdTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("createdBlockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "cumulativeSupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeTotalRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("inputTokenBalances", Value.fromBigIntArray(new Array(0)));
    this.set("inputTokenWeights", Value.fromBigDecimalArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidityPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidityPool", id.toString(), this);
    }
  }

  static load(id: string): LiquidityPool | null {
    return changetype<LiquidityPool | null>(store.get("LiquidityPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get inputTokens(): Array<string> {
    let value = this.get("inputTokens");
    return value!.toStringArray();
  }

  set inputTokens(value: Array<string>) {
    this.set("inputTokens", Value.fromStringArray(value));
  }

  get outputToken(): string | null {
    let value = this.get("outputToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outputToken(value: string | null) {
    if (!value) {
      this.unset("outputToken");
    } else {
      this.set("outputToken", Value.fromString(<string>value));
    }
  }

  get rewardTokens(): Array<string> | null {
    let value = this.get("rewardTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rewardTokens(value: Array<string> | null) {
    if (!value) {
      this.unset("rewardTokens");
    } else {
      this.set("rewardTokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get fees(): Array<string> {
    let value = this.get("fees");
    return value!.toStringArray();
  }

  set fees(value: Array<string>) {
    this.set("fees", Value.fromStringArray(value));
  }

  get isSingleSided(): boolean {
    let value = this.get("isSingleSided");
    return value!.toBoolean();
  }

  set isSingleSided(value: boolean) {
    this.set("isSingleSided", Value.fromBoolean(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdBlockNumber(): BigInt {
    let value = this.get("createdBlockNumber");
    return value!.toBigInt();
  }

  set createdBlockNumber(value: BigInt) {
    this.set("createdBlockNumber", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeVolumeUSD(): BigDecimal {
    let value = this.get("cumulativeVolumeUSD");
    return value!.toBigDecimal();
  }

  set cumulativeVolumeUSD(value: BigDecimal) {
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(value));
  }

  get inputTokenBalances(): Array<BigInt> {
    let value = this.get("inputTokenBalances");
    return value!.toBigIntArray();
  }

  set inputTokenBalances(value: Array<BigInt>) {
    this.set("inputTokenBalances", Value.fromBigIntArray(value));
  }

  get inputTokenWeights(): Array<BigDecimal> {
    let value = this.get("inputTokenWeights");
    return value!.toBigDecimalArray();
  }

  set inputTokenWeights(value: Array<BigDecimal>) {
    this.set("inputTokenWeights", Value.fromBigDecimalArray(value));
  }

  get outputTokenSupply(): BigInt | null {
    let value = this.get("outputTokenSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outputTokenSupply(value: BigInt | null) {
    if (!value) {
      this.unset("outputTokenSupply");
    } else {
      this.set("outputTokenSupply", Value.fromBigInt(<BigInt>value));
    }
  }

  get outputTokenPriceUSD(): BigDecimal | null {
    let value = this.get("outputTokenPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set outputTokenPriceUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("outputTokenPriceUSD");
    } else {
      this.set("outputTokenPriceUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get stakedOutputTokenAmount(): BigInt | null {
    let value = this.get("stakedOutputTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakedOutputTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("stakedOutputTokenAmount");
    } else {
      this.set("stakedOutputTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get rewardTokenEmissionsAmount(): Array<BigInt> | null {
    let value = this.get("rewardTokenEmissionsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardTokenEmissionsAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsAmount");
    } else {
      this.set(
        "rewardTokenEmissionsAmount",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get rewardTokenEmissionsUSD(): Array<BigDecimal> | null {
    let value = this.get("rewardTokenEmissionsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set rewardTokenEmissionsUSD(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsUSD");
    } else {
      this.set(
        "rewardTokenEmissionsUSD",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value)
      );
    }
  }

  get dailySnapshots(): Array<string> {
    let value = this.get("dailySnapshots");
    return value!.toStringArray();
  }

  set dailySnapshots(value: Array<string>) {
    this.set("dailySnapshots", Value.fromStringArray(value));
  }

  get hourlySnapshots(): Array<string> {
    let value = this.get("hourlySnapshots");
    return value!.toStringArray();
  }

  set hourlySnapshots(value: Array<string>) {
    this.set("hourlySnapshots", Value.fromStringArray(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get withdraws(): Array<string> {
    let value = this.get("withdraws");
    return value!.toStringArray();
  }

  set withdraws(value: Array<string>) {
    this.set("withdraws", Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value!.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }
}

export class LiquidityPoolDailySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocol", Value.fromString(""));
    this.set("pool", Value.fromString(""));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "cumulativeSupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "dailySupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "dailyProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeTotalRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("dailyTotalRevenueUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyVolumeByTokenAmount", Value.fromBigIntArray(new Array(0)));
    this.set("dailyVolumeByTokenUSD", Value.fromBigDecimalArray(new Array(0)));
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("inputTokenBalances", Value.fromBigIntArray(new Array(0)));
    this.set("inputTokenWeights", Value.fromBigDecimalArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LiquidityPoolDailySnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidityPoolDailySnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidityPoolDailySnapshot", id.toString(), this);
    }
  }

  static load(id: string): LiquidityPoolDailySnapshot | null {
    return changetype<LiquidityPoolDailySnapshot | null>(
      store.get("LiquidityPoolDailySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailySupplySideRevenueUSD(): BigDecimal {
    let value = this.get("dailySupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set dailySupplySideRevenueUSD(value: BigDecimal) {
    this.set("dailySupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("dailyProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set dailyProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("dailyProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyTotalRevenueUSD(): BigDecimal {
    let value = this.get("dailyTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set dailyTotalRevenueUSD(value: BigDecimal) {
    this.set("dailyTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyVolumeUSD(): BigDecimal {
    let value = this.get("dailyVolumeUSD");
    return value!.toBigDecimal();
  }

  set dailyVolumeUSD(value: BigDecimal) {
    this.set("dailyVolumeUSD", Value.fromBigDecimal(value));
  }

  get dailyVolumeByTokenAmount(): Array<BigInt> {
    let value = this.get("dailyVolumeByTokenAmount");
    return value!.toBigIntArray();
  }

  set dailyVolumeByTokenAmount(value: Array<BigInt>) {
    this.set("dailyVolumeByTokenAmount", Value.fromBigIntArray(value));
  }

  get dailyVolumeByTokenUSD(): Array<BigDecimal> {
    let value = this.get("dailyVolumeByTokenUSD");
    return value!.toBigDecimalArray();
  }

  set dailyVolumeByTokenUSD(value: Array<BigDecimal>) {
    this.set("dailyVolumeByTokenUSD", Value.fromBigDecimalArray(value));
  }

  get cumulativeVolumeUSD(): BigDecimal {
    let value = this.get("cumulativeVolumeUSD");
    return value!.toBigDecimal();
  }

  set cumulativeVolumeUSD(value: BigDecimal) {
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(value));
  }

  get inputTokenBalances(): Array<BigInt> {
    let value = this.get("inputTokenBalances");
    return value!.toBigIntArray();
  }

  set inputTokenBalances(value: Array<BigInt>) {
    this.set("inputTokenBalances", Value.fromBigIntArray(value));
  }

  get inputTokenWeights(): Array<BigDecimal> {
    let value = this.get("inputTokenWeights");
    return value!.toBigDecimalArray();
  }

  set inputTokenWeights(value: Array<BigDecimal>) {
    this.set("inputTokenWeights", Value.fromBigDecimalArray(value));
  }

  get outputTokenSupply(): BigInt | null {
    let value = this.get("outputTokenSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outputTokenSupply(value: BigInt | null) {
    if (!value) {
      this.unset("outputTokenSupply");
    } else {
      this.set("outputTokenSupply", Value.fromBigInt(<BigInt>value));
    }
  }

  get outputTokenPriceUSD(): BigDecimal | null {
    let value = this.get("outputTokenPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set outputTokenPriceUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("outputTokenPriceUSD");
    } else {
      this.set("outputTokenPriceUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get stakedOutputTokenAmount(): BigInt | null {
    let value = this.get("stakedOutputTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakedOutputTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("stakedOutputTokenAmount");
    } else {
      this.set("stakedOutputTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get rewardTokenEmissionsAmount(): Array<BigInt> | null {
    let value = this.get("rewardTokenEmissionsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardTokenEmissionsAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsAmount");
    } else {
      this.set(
        "rewardTokenEmissionsAmount",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get rewardTokenEmissionsUSD(): Array<BigDecimal> | null {
    let value = this.get("rewardTokenEmissionsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set rewardTokenEmissionsUSD(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsUSD");
    } else {
      this.set(
        "rewardTokenEmissionsUSD",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value)
      );
    }
  }
}

export class LiquidityPoolHourlySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocol", Value.fromString(""));
    this.set("pool", Value.fromString(""));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "cumulativeSupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "hourlySupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "hourlyProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeTotalRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("hourlyTotalRevenueUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("hourlyVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("hourlyVolumeByTokenAmount", Value.fromBigIntArray(new Array(0)));
    this.set("hourlyVolumeByTokenUSD", Value.fromBigDecimalArray(new Array(0)));
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("inputTokenBalances", Value.fromBigIntArray(new Array(0)));
    this.set("inputTokenWeights", Value.fromBigDecimalArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LiquidityPoolHourlySnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidityPoolHourlySnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidityPoolHourlySnapshot", id.toString(), this);
    }
  }

  static load(id: string): LiquidityPoolHourlySnapshot | null {
    return changetype<LiquidityPoolHourlySnapshot | null>(
      store.get("LiquidityPoolHourlySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get hourlySupplySideRevenueUSD(): BigDecimal {
    let value = this.get("hourlySupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set hourlySupplySideRevenueUSD(value: BigDecimal) {
    this.set("hourlySupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get hourlyProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("hourlyProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set hourlyProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("hourlyProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get hourlyTotalRevenueUSD(): BigDecimal {
    let value = this.get("hourlyTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set hourlyTotalRevenueUSD(value: BigDecimal) {
    this.set("hourlyTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get hourlyVolumeUSD(): BigDecimal {
    let value = this.get("hourlyVolumeUSD");
    return value!.toBigDecimal();
  }

  set hourlyVolumeUSD(value: BigDecimal) {
    this.set("hourlyVolumeUSD", Value.fromBigDecimal(value));
  }

  get hourlyVolumeByTokenAmount(): Array<BigInt> {
    let value = this.get("hourlyVolumeByTokenAmount");
    return value!.toBigIntArray();
  }

  set hourlyVolumeByTokenAmount(value: Array<BigInt>) {
    this.set("hourlyVolumeByTokenAmount", Value.fromBigIntArray(value));
  }

  get hourlyVolumeByTokenUSD(): Array<BigDecimal> {
    let value = this.get("hourlyVolumeByTokenUSD");
    return value!.toBigDecimalArray();
  }

  set hourlyVolumeByTokenUSD(value: Array<BigDecimal>) {
    this.set("hourlyVolumeByTokenUSD", Value.fromBigDecimalArray(value));
  }

  get cumulativeVolumeUSD(): BigDecimal {
    let value = this.get("cumulativeVolumeUSD");
    return value!.toBigDecimal();
  }

  set cumulativeVolumeUSD(value: BigDecimal) {
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(value));
  }

  get inputTokenBalances(): Array<BigInt> {
    let value = this.get("inputTokenBalances");
    return value!.toBigIntArray();
  }

  set inputTokenBalances(value: Array<BigInt>) {
    this.set("inputTokenBalances", Value.fromBigIntArray(value));
  }

  get inputTokenWeights(): Array<BigDecimal> {
    let value = this.get("inputTokenWeights");
    return value!.toBigDecimalArray();
  }

  set inputTokenWeights(value: Array<BigDecimal>) {
    this.set("inputTokenWeights", Value.fromBigDecimalArray(value));
  }

  get outputTokenSupply(): BigInt | null {
    let value = this.get("outputTokenSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outputTokenSupply(value: BigInt | null) {
    if (!value) {
      this.unset("outputTokenSupply");
    } else {
      this.set("outputTokenSupply", Value.fromBigInt(<BigInt>value));
    }
  }

  get outputTokenPriceUSD(): BigDecimal | null {
    let value = this.get("outputTokenPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set outputTokenPriceUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("outputTokenPriceUSD");
    } else {
      this.set("outputTokenPriceUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get stakedOutputTokenAmount(): BigInt | null {
    let value = this.get("stakedOutputTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakedOutputTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("stakedOutputTokenAmount");
    } else {
      this.set("stakedOutputTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get rewardTokenEmissionsAmount(): Array<BigInt> | null {
    let value = this.get("rewardTokenEmissionsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardTokenEmissionsAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsAmount");
    } else {
      this.set(
        "rewardTokenEmissionsAmount",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get rewardTokenEmissionsUSD(): Array<BigDecimal> | null {
    let value = this.get("rewardTokenEmissionsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set rewardTokenEmissionsUSD(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsUSD");
    } else {
      this.set(
        "rewardTokenEmissionsUSD",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value)
      );
    }
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hash", Value.fromString(""));
    this.set("logIndex", Value.fromI32(0));
    this.set("protocol", Value.fromString(""));
    this.set("to", Value.fromString(""));
    this.set("from", Value.fromString(""));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("inputTokens", Value.fromStringArray(new Array(0)));
    this.set("inputTokenAmounts", Value.fromBigIntArray(new Array(0)));
    this.set("amountUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Deposit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    return value!.toI32();
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get inputTokens(): Array<string> {
    let value = this.get("inputTokens");
    return value!.toStringArray();
  }

  set inputTokens(value: Array<string>) {
    this.set("inputTokens", Value.fromStringArray(value));
  }

  get outputToken(): string | null {
    let value = this.get("outputToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outputToken(value: string | null) {
    if (!value) {
      this.unset("outputToken");
    } else {
      this.set("outputToken", Value.fromString(<string>value));
    }
  }

  get inputTokenAmounts(): Array<BigInt> {
    let value = this.get("inputTokenAmounts");
    return value!.toBigIntArray();
  }

  set inputTokenAmounts(value: Array<BigInt>) {
    this.set("inputTokenAmounts", Value.fromBigIntArray(value));
  }

  get outputTokenAmount(): BigInt | null {
    let value = this.get("outputTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outputTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("outputTokenAmount");
    } else {
      this.set("outputTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value!.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hash", Value.fromString(""));
    this.set("logIndex", Value.fromI32(0));
    this.set("protocol", Value.fromString(""));
    this.set("to", Value.fromString(""));
    this.set("from", Value.fromString(""));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("inputTokens", Value.fromStringArray(new Array(0)));
    this.set("inputTokenAmounts", Value.fromBigIntArray(new Array(0)));
    this.set("amountUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Withdraw entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Withdraw", id.toString(), this);
    }
  }

  static load(id: string): Withdraw | null {
    return changetype<Withdraw | null>(store.get("Withdraw", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    return value!.toI32();
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get inputTokens(): Array<string> {
    let value = this.get("inputTokens");
    return value!.toStringArray();
  }

  set inputTokens(value: Array<string>) {
    this.set("inputTokens", Value.fromStringArray(value));
  }

  get outputToken(): string | null {
    let value = this.get("outputToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outputToken(value: string | null) {
    if (!value) {
      this.unset("outputToken");
    } else {
      this.set("outputToken", Value.fromString(<string>value));
    }
  }

  get inputTokenAmounts(): Array<BigInt> {
    let value = this.get("inputTokenAmounts");
    return value!.toBigIntArray();
  }

  set inputTokenAmounts(value: Array<BigInt>) {
    this.set("inputTokenAmounts", Value.fromBigIntArray(value));
  }

  get outputTokenAmount(): BigInt | null {
    let value = this.get("outputTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outputTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("outputTokenAmount");
    } else {
      this.set("outputTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value!.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hash", Value.fromString(""));
    this.set("logIndex", Value.fromI32(0));
    this.set("protocol", Value.fromString(""));
    this.set("to", Value.fromString(""));
    this.set("from", Value.fromString(""));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tokenIn", Value.fromString(""));
    this.set("amountIn", Value.fromBigInt(BigInt.zero()));
    this.set("amountInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tokenOut", Value.fromString(""));
    this.set("amountOut", Value.fromBigInt(BigInt.zero()));
    this.set("amountOutUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Swap entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    return value!.toI32();
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get tokenIn(): string {
    let value = this.get("tokenIn");
    return value!.toString();
  }

  set tokenIn(value: string) {
    this.set("tokenIn", Value.fromString(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    return value!.toBigInt();
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get amountInUSD(): BigDecimal {
    let value = this.get("amountInUSD");
    return value!.toBigDecimal();
  }

  set amountInUSD(value: BigDecimal) {
    this.set("amountInUSD", Value.fromBigDecimal(value));
  }

  get tokenOut(): string {
    let value = this.get("tokenOut");
    return value!.toString();
  }

  set tokenOut(value: string) {
    this.set("tokenOut", Value.fromString(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    return value!.toBigInt();
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get amountOutUSD(): BigDecimal {
    let value = this.get("amountOutUSD");
    return value!.toBigDecimal();
  }

  set amountOutUSD(value: BigDecimal) {
    this.set("amountOutUSD", Value.fromBigDecimal(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class ActiveAccount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ActiveAccount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ActiveAccount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ActiveAccount", id.toString(), this);
    }
  }

  static load(id: string): ActiveAccount | null {
    return changetype<ActiveAccount | null>(store.get("ActiveAccount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class _LiquidityPoolAmount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("inputTokens", Value.fromStringArray(new Array(0)));
    this.set("inputTokenBalances", Value.fromBigDecimalArray(new Array(0)));
    this.set("tokenPrices", Value.fromBigDecimalArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _LiquidityPoolAmount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save _LiquidityPoolAmount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("_LiquidityPoolAmount", id.toString(), this);
    }
  }

  static load(id: string): _LiquidityPoolAmount | null {
    return changetype<_LiquidityPoolAmount | null>(
      store.get("_LiquidityPoolAmount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get inputTokens(): Array<string> {
    let value = this.get("inputTokens");
    return value!.toStringArray();
  }

  set inputTokens(value: Array<string>) {
    this.set("inputTokens", Value.fromStringArray(value));
  }

  get inputTokenBalances(): Array<BigDecimal> {
    let value = this.get("inputTokenBalances");
    return value!.toBigDecimalArray();
  }

  set inputTokenBalances(value: Array<BigDecimal>) {
    this.set("inputTokenBalances", Value.fromBigDecimalArray(value));
  }

  get tokenPrices(): Array<BigDecimal> {
    let value = this.get("tokenPrices");
    return value!.toBigDecimalArray();
  }

  set tokenPrices(value: Array<BigDecimal>) {
    this.set("tokenPrices", Value.fromBigDecimalArray(value));
  }
}

export class _HelperStore extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _HelperStore entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save _HelperStore entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("_HelperStore", id.toString(), this);
    }
  }

  static load(id: string): _HelperStore | null {
    return changetype<_HelperStore | null>(store.get("_HelperStore", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get valueDecimal(): BigDecimal | null {
    let value = this.get("valueDecimal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set valueDecimal(value: BigDecimal | null) {
    if (!value) {
      this.unset("valueDecimal");
    } else {
      this.set("valueDecimal", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get valueInt(): i32 {
    let value = this.get("valueInt");
    return value!.toI32();
  }

  set valueInt(value: i32) {
    this.set("valueInt", Value.fromI32(value));
  }
}

export class _TokenWhitelist extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("whitelistPools", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _TokenWhitelist entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save _TokenWhitelist entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("_TokenWhitelist", id.toString(), this);
    }
  }

  static load(id: string): _TokenWhitelist | null {
    return changetype<_TokenWhitelist | null>(store.get("_TokenWhitelist", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get whitelistPools(): Array<string> {
    let value = this.get("whitelistPools");
    return value!.toStringArray();
  }

  set whitelistPools(value: Array<string>) {
    this.set("whitelistPools", Value.fromStringArray(value));
  }
}

export class AirExtraData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("value", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirExtraData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirExtraData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirExtraData", id.toString(), this);
    }
  }

  static load(id: string): AirExtraData | null {
    return changetype<AirExtraData | null>(store.get("AirExtraData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value!.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}

export class AirDailyAggregateEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("network", Value.fromString(""));
    this.set("contract", Value.fromString(""));
    this.set("protocolType", Value.fromString(""));
    this.set("protocolActionType", Value.fromString(""));
    this.set("daySinceEpoch", Value.fromBigInt(BigInt.zero()));
    this.set("startDayTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("updatedTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("stats", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirDailyAggregateEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirDailyAggregateEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirDailyAggregateEntity", id.toString(), this);
    }
  }

  static load(id: string): AirDailyAggregateEntity | null {
    return changetype<AirDailyAggregateEntity | null>(
      store.get("AirDailyAggregateEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get network(): string {
    let value = this.get("network");
    return value!.toString();
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get protocolType(): string {
    let value = this.get("protocolType");
    return value!.toString();
  }

  set protocolType(value: string) {
    this.set("protocolType", Value.fromString(value));
  }

  get protocolActionType(): string {
    let value = this.get("protocolActionType");
    return value!.toString();
  }

  set protocolActionType(value: string) {
    this.set("protocolActionType", Value.fromString(value));
  }

  get daySinceEpoch(): BigInt {
    let value = this.get("daySinceEpoch");
    return value!.toBigInt();
  }

  set daySinceEpoch(value: BigInt) {
    this.set("daySinceEpoch", Value.fromBigInt(value));
  }

  get startDayTimestamp(): BigInt {
    let value = this.get("startDayTimestamp");
    return value!.toBigInt();
  }

  set startDayTimestamp(value: BigInt) {
    this.set("startDayTimestamp", Value.fromBigInt(value));
  }

  get updatedTimestamp(): BigInt {
    let value = this.get("updatedTimestamp");
    return value!.toBigInt();
  }

  set updatedTimestamp(value: BigInt) {
    this.set("updatedTimestamp", Value.fromBigInt(value));
  }

  get accounts(): Array<string> | null {
    let value = this.get("accounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set accounts(value: Array<string> | null) {
    if (!value) {
      this.unset("accounts");
    } else {
      this.set("accounts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get stats(): string {
    let value = this.get("stats");
    return value!.toString();
  }

  set stats(value: string) {
    this.set("stats", Value.fromString(value));
  }
}

export class AirDailyAggregateEntityStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocolActionType", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirDailyAggregateEntityStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirDailyAggregateEntityStats entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirDailyAggregateEntityStats", id.toString(), this);
    }
  }

  static load(id: string): AirDailyAggregateEntityStats | null {
    return changetype<AirDailyAggregateEntityStats | null>(
      store.get("AirDailyAggregateEntityStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocolActionType(): string {
    let value = this.get("protocolActionType");
    return value!.toString();
  }

  set protocolActionType(value: string) {
    this.set("protocolActionType", Value.fromString(value));
  }

  get addPoolLiquidityStats(): string | null {
    let value = this.get("addPoolLiquidityStats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set addPoolLiquidityStats(value: string | null) {
    if (!value) {
      this.unset("addPoolLiquidityStats");
    } else {
      this.set("addPoolLiquidityStats", Value.fromString(<string>value));
    }
  }

  get removePoolLiquidityStats(): string | null {
    let value = this.get("removePoolLiquidityStats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set removePoolLiquidityStats(value: string | null) {
    if (!value) {
      this.unset("removePoolLiquidityStats");
    } else {
      this.set("removePoolLiquidityStats", Value.fromString(<string>value));
    }
  }

  get farmPoolRewardStats(): string | null {
    let value = this.get("farmPoolRewardStats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set farmPoolRewardStats(value: string | null) {
    if (!value) {
      this.unset("farmPoolRewardStats");
    } else {
      this.set("farmPoolRewardStats", Value.fromString(<string>value));
    }
  }

  get swapStats(): string | null {
    let value = this.get("swapStats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set swapStats(value: string | null) {
    if (!value) {
      this.unset("swapStats");
    } else {
      this.set("swapStats", Value.fromString(<string>value));
    }
  }
}

export class AirToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
    this.set("standard", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirToken", id.toString(), this);
    }
  }

  static load(id: string): AirToken | null {
    return changetype<AirToken | null>(store.get("AirToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get standard(): string {
    let value = this.get("standard");
    return value!.toString();
  }

  set standard(value: string) {
    this.set("standard", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get totalSupply(): BigInt | null {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt | null) {
    if (!value) {
      this.unset("totalSupply");
    } else {
      this.set("totalSupply", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class AirTokenMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("displayContentType", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirTokenMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirTokenMetadata entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirTokenMetadata", id.toString(), this);
    }
  }

  static load(id: string): AirTokenMetadata | null {
    return changetype<AirTokenMetadata | null>(
      store.get("AirTokenMetadata", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get displayContentType(): string {
    let value = this.get("displayContentType");
    return value!.toString();
  }

  set displayContentType(value: string) {
    this.set("displayContentType", Value.fromString(value));
  }

  get displayContent(): string | null {
    let value = this.get("displayContent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set displayContent(value: string | null) {
    if (!value) {
      this.unset("displayContent");
    } else {
      this.set("displayContent", Value.fromString(<string>value));
    }
  }
}

export class AirDailyAggregateEntityAccount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromString(""));
    this.set("dailyAggregatedEntity", Value.fromString(""));
    this.set("volumeInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("index", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirDailyAggregateEntityAccount entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirDailyAggregateEntityAccount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirDailyAggregateEntityAccount", id.toString(), this);
    }
  }

  static load(id: string): AirDailyAggregateEntityAccount | null {
    return changetype<AirDailyAggregateEntityAccount | null>(
      store.get("AirDailyAggregateEntityAccount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get dailyAggregatedEntity(): string {
    let value = this.get("dailyAggregatedEntity");
    return value!.toString();
  }

  set dailyAggregatedEntity(value: string) {
    this.set("dailyAggregatedEntity", Value.fromString(value));
  }

  get volumeInUSD(): BigDecimal {
    let value = this.get("volumeInUSD");
    return value!.toBigDecimal();
  }

  set volumeInUSD(value: BigDecimal) {
    this.set("volumeInUSD", Value.fromBigDecimal(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value!.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }
}

export class AirAccount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirAccount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirAccount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirAccount", id.toString(), this);
    }
  }

  static load(id: string): AirAccount | null {
    return changetype<AirAccount | null>(store.get("AirAccount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get dailyAggregatedEntities(): Array<string> | null {
    let value = this.get("dailyAggregatedEntities");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set dailyAggregatedEntities(value: Array<string> | null) {
    if (!value) {
      this.unset("dailyAggregatedEntities");
    } else {
      this.set(
        "dailyAggregatedEntities",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class AirDEXPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("inputToken", Value.fromStringArray(new Array(0)));
    this.set("weightage", Value.fromBigDecimalArray(new Array(0)));
    this.set("outputToken", Value.fromString(""));
    this.set("fee", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirDEXPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirDEXPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirDEXPool", id.toString(), this);
    }
  }

  static load(id: string): AirDEXPool | null {
    return changetype<AirDEXPool | null>(store.get("AirDEXPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get inputToken(): Array<string> {
    let value = this.get("inputToken");
    return value!.toStringArray();
  }

  set inputToken(value: Array<string>) {
    this.set("inputToken", Value.fromStringArray(value));
  }

  get weightage(): Array<BigDecimal> {
    let value = this.get("weightage");
    return value!.toBigDecimalArray();
  }

  set weightage(value: Array<BigDecimal>) {
    this.set("weightage", Value.fromBigDecimalArray(value));
  }

  get outputToken(): string {
    let value = this.get("outputToken");
    return value!.toString();
  }

  set outputToken(value: string) {
    this.set("outputToken", Value.fromString(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }
}

export class AirLiquidityPoolStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dexPool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirLiquidityPoolStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirLiquidityPoolStats entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirLiquidityPoolStats", id.toString(), this);
    }
  }

  static load(id: string): AirLiquidityPoolStats | null {
    return changetype<AirLiquidityPoolStats | null>(
      store.get("AirLiquidityPoolStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dexPool(): string {
    let value = this.get("dexPool");
    return value!.toString();
  }

  set dexPool(value: string) {
    this.set("dexPool", Value.fromString(value));
  }

  get inputTokensStats(): Array<string> {
    let value = this.get("inputTokensStats");
    return value!.toStringArray();
  }

  set inputTokensStats(value: Array<string>) {
    this.set("inputTokensStats", Value.fromStringArray(value));
  }

  get outputTokenStats(): Array<string> {
    let value = this.get("outputTokenStats");
    return value!.toStringArray();
  }

  set outputTokenStats(value: Array<string>) {
    this.set("outputTokenStats", Value.fromStringArray(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class AirTokenStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirTokenStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirTokenStats entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirTokenStats", id.toString(), this);
    }
  }

  static load(id: string): AirTokenStats | null {
    return changetype<AirTokenStats | null>(store.get("AirTokenStats", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class AirEntityDailyChangeStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set(
      "walletCountChangeInPercentage",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "tokenCountChangeInPercentage",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "transactionCountChangeInPercentage",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "volumeInUSDChangeInPercentage",
      Value.fromBigDecimal(BigDecimal.zero())
    );
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirEntityDailyChangeStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirEntityDailyChangeStats entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirEntityDailyChangeStats", id.toString(), this);
    }
  }

  static load(id: string): AirEntityDailyChangeStats | null {
    return changetype<AirEntityDailyChangeStats | null>(
      store.get("AirEntityDailyChangeStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get walletCountChangeInPercentage(): BigDecimal {
    let value = this.get("walletCountChangeInPercentage");
    return value!.toBigDecimal();
  }

  set walletCountChangeInPercentage(value: BigDecimal) {
    this.set("walletCountChangeInPercentage", Value.fromBigDecimal(value));
  }

  get tokenCountChangeInPercentage(): BigDecimal {
    let value = this.get("tokenCountChangeInPercentage");
    return value!.toBigDecimal();
  }

  set tokenCountChangeInPercentage(value: BigDecimal) {
    this.set("tokenCountChangeInPercentage", Value.fromBigDecimal(value));
  }

  get transactionCountChangeInPercentage(): BigDecimal {
    let value = this.get("transactionCountChangeInPercentage");
    return value!.toBigDecimal();
  }

  set transactionCountChangeInPercentage(value: BigDecimal) {
    this.set("transactionCountChangeInPercentage", Value.fromBigDecimal(value));
  }

  get volumeInUSDChangeInPercentage(): BigDecimal {
    let value = this.get("volumeInUSDChangeInPercentage");
    return value!.toBigDecimal();
  }

  set volumeInUSDChangeInPercentage(value: BigDecimal) {
    this.set("volumeInUSDChangeInPercentage", Value.fromBigDecimal(value));
  }
}

export class AirLiquidityPoolInputTokenStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("liquidityPoolStatsRef", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("walletCount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenCount", Value.fromBigInt(BigInt.zero()));
    this.set("transactionCount", Value.fromBigInt(BigInt.zero()));
    this.set("volumeInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyChange", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirLiquidityPoolInputTokenStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirLiquidityPoolInputTokenStats entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirLiquidityPoolInputTokenStats", id.toString(), this);
    }
  }

  static load(id: string): AirLiquidityPoolInputTokenStats | null {
    return changetype<AirLiquidityPoolInputTokenStats | null>(
      store.get("AirLiquidityPoolInputTokenStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidityPoolStatsRef(): string {
    let value = this.get("liquidityPoolStatsRef");
    return value!.toString();
  }

  set liquidityPoolStatsRef(value: string) {
    this.set("liquidityPoolStatsRef", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get walletCount(): BigInt {
    let value = this.get("walletCount");
    return value!.toBigInt();
  }

  set walletCount(value: BigInt) {
    this.set("walletCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value!.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get transactionCount(): BigInt {
    let value = this.get("transactionCount");
    return value!.toBigInt();
  }

  set transactionCount(value: BigInt) {
    this.set("transactionCount", Value.fromBigInt(value));
  }

  get volumeInUSD(): BigDecimal {
    let value = this.get("volumeInUSD");
    return value!.toBigDecimal();
  }

  set volumeInUSD(value: BigDecimal) {
    this.set("volumeInUSD", Value.fromBigDecimal(value));
  }

  get dailyChange(): string {
    let value = this.get("dailyChange");
    return value!.toString();
  }

  set dailyChange(value: string) {
    this.set("dailyChange", Value.fromString(value));
  }

  get extraData(): Array<string> | null {
    let value = this.get("extraData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set extraData(value: Array<string> | null) {
    if (!value) {
      this.unset("extraData");
    } else {
      this.set("extraData", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class AirLiquidityPoolOutputTokenStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("liquidityPoolStatsRef", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("walletCount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenCount", Value.fromBigInt(BigInt.zero()));
    this.set("transactionCount", Value.fromBigInt(BigInt.zero()));
    this.set("volumeInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyChange", Value.fromString(""));
    this.set("extraData", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirLiquidityPoolOutputTokenStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirLiquidityPoolOutputTokenStats entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirLiquidityPoolOutputTokenStats", id.toString(), this);
    }
  }

  static load(id: string): AirLiquidityPoolOutputTokenStats | null {
    return changetype<AirLiquidityPoolOutputTokenStats | null>(
      store.get("AirLiquidityPoolOutputTokenStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidityPoolStatsRef(): string {
    let value = this.get("liquidityPoolStatsRef");
    return value!.toString();
  }

  set liquidityPoolStatsRef(value: string) {
    this.set("liquidityPoolStatsRef", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get walletCount(): BigInt {
    let value = this.get("walletCount");
    return value!.toBigInt();
  }

  set walletCount(value: BigInt) {
    this.set("walletCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value!.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get transactionCount(): BigInt {
    let value = this.get("transactionCount");
    return value!.toBigInt();
  }

  set transactionCount(value: BigInt) {
    this.set("transactionCount", Value.fromBigInt(value));
  }

  get volumeInUSD(): BigDecimal {
    let value = this.get("volumeInUSD");
    return value!.toBigDecimal();
  }

  set volumeInUSD(value: BigDecimal) {
    this.set("volumeInUSD", Value.fromBigDecimal(value));
  }

  get dailyChange(): string {
    let value = this.get("dailyChange");
    return value!.toString();
  }

  set dailyChange(value: string) {
    this.set("dailyChange", Value.fromString(value));
  }

  get extraData(): Array<string> {
    let value = this.get("extraData");
    return value!.toStringArray();
  }

  set extraData(value: Array<string>) {
    this.set("extraData", Value.fromStringArray(value));
  }
}

export class AirLiquidityPoolTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dexPool", Value.fromString(""));
    this.set("liquidityPoolStatsRef", Value.fromString(""));
    this.set("hash", Value.fromString(""));
    this.set("inputTokenTransfers", Value.fromStringArray(new Array(0)));
    this.set("outputTokenTransfer", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirLiquidityPoolTransaction entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirLiquidityPoolTransaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirLiquidityPoolTransaction", id.toString(), this);
    }
  }

  static load(id: string): AirLiquidityPoolTransaction | null {
    return changetype<AirLiquidityPoolTransaction | null>(
      store.get("AirLiquidityPoolTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dexPool(): string {
    let value = this.get("dexPool");
    return value!.toString();
  }

  set dexPool(value: string) {
    this.set("dexPool", Value.fromString(value));
  }

  get liquidityPoolStatsRef(): string {
    let value = this.get("liquidityPoolStatsRef");
    return value!.toString();
  }

  set liquidityPoolStatsRef(value: string) {
    this.set("liquidityPoolStatsRef", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get inputTokenTransfers(): Array<string> {
    let value = this.get("inputTokenTransfers");
    return value!.toStringArray();
  }

  set inputTokenTransfers(value: Array<string>) {
    this.set("inputTokenTransfers", Value.fromStringArray(value));
  }

  get outputTokenTransfer(): string {
    let value = this.get("outputTokenTransfer");
    return value!.toString();
  }

  set outputTokenTransfer(value: string) {
    this.set("outputTokenTransfer", Value.fromString(value));
  }
}

export class AirTokenTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("from", Value.fromString(""));
    this.set("to", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirTokenTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirTokenTransfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirTokenTransfer", id.toString(), this);
    }
  }

  static load(id: string): AirTokenTransfer | null {
    return changetype<AirTokenTransfer | null>(
      store.get("AirTokenTransfer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get fee(): BigInt | null {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fee(value: BigInt | null) {
    if (!value) {
      this.unset("fee");
    } else {
      this.set("fee", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class AirPoolFarmRewardStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dexPool", Value.fromString(""));
    this.set("transactions", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirPoolFarmRewardStats entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirPoolFarmRewardStats entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirPoolFarmRewardStats", id.toString(), this);
    }
  }

  static load(id: string): AirPoolFarmRewardStats | null {
    return changetype<AirPoolFarmRewardStats | null>(
      store.get("AirPoolFarmRewardStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dexPool(): string {
    let value = this.get("dexPool");
    return value!.toString();
  }

  set dexPool(value: string) {
    this.set("dexPool", Value.fromString(value));
  }

  get inputTokenStats(): Array<string> | null {
    let value = this.get("inputTokenStats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set inputTokenStats(value: Array<string> | null) {
    if (!value) {
      this.unset("inputTokenStats");
    } else {
      this.set("inputTokenStats", Value.fromStringArray(<Array<string>>value));
    }
  }

  get outputTokensStats(): Array<string> | null {
    let value = this.get("outputTokensStats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set outputTokensStats(value: Array<string> | null) {
    if (!value) {
      this.unset("outputTokensStats");
    } else {
      this.set(
        "outputTokensStats",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class AirPoolFarmTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hash", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirPoolFarmTransaction entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirPoolFarmTransaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirPoolFarmTransaction", id.toString(), this);
    }
  }

  static load(id: string): AirPoolFarmTransaction | null {
    return changetype<AirPoolFarmTransaction | null>(
      store.get("AirPoolFarmTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get inputToken(): string | null {
    let value = this.get("inputToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set inputToken(value: string | null) {
    if (!value) {
      this.unset("inputToken");
    } else {
      this.set("inputToken", Value.fromString(<string>value));
    }
  }

  get outputToken(): string | null {
    let value = this.get("outputToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outputToken(value: string | null) {
    if (!value) {
      this.unset("outputToken");
    } else {
      this.set("outputToken", Value.fromString(<string>value));
    }
  }

  get inputAmount(): BigInt | null {
    let value = this.get("inputAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set inputAmount(value: BigInt | null) {
    if (!value) {
      this.unset("inputAmount");
    } else {
      this.set("inputAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get outputAmount(): BigInt | null {
    let value = this.get("outputAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outputAmount(value: BigInt | null) {
    if (!value) {
      this.unset("outputAmount");
    } else {
      this.set("outputAmount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class AirDEXSwapStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dexPool", Value.fromString(""));
    this.set("inputTokenStat", Value.fromString(""));
    this.set("outputTokensStat", Value.fromString(""));
    this.set("transactions", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirDEXSwapStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirDEXSwapStats entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirDEXSwapStats", id.toString(), this);
    }
  }

  static load(id: string): AirDEXSwapStats | null {
    return changetype<AirDEXSwapStats | null>(store.get("AirDEXSwapStats", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dexPool(): string {
    let value = this.get("dexPool");
    return value!.toString();
  }

  set dexPool(value: string) {
    this.set("dexPool", Value.fromString(value));
  }

  get inputTokenStat(): string {
    let value = this.get("inputTokenStat");
    return value!.toString();
  }

  set inputTokenStat(value: string) {
    this.set("inputTokenStat", Value.fromString(value));
  }

  get outputTokensStat(): string {
    let value = this.get("outputTokensStat");
    return value!.toString();
  }

  set outputTokensStat(value: string) {
    this.set("outputTokensStat", Value.fromString(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class AirDEXSwapTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dexPool", Value.fromString(""));
    this.set("entityStats", Value.fromString(""));
    this.set("hash", Value.fromString(""));
    this.set("inputTokenTransfers", Value.fromStringArray(new Array(0)));
    this.set("outputTokenTransfer", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AirDEXSwapTransaction entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirDEXSwapTransaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirDEXSwapTransaction", id.toString(), this);
    }
  }

  static load(id: string): AirDEXSwapTransaction | null {
    return changetype<AirDEXSwapTransaction | null>(
      store.get("AirDEXSwapTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dexPool(): string {
    let value = this.get("dexPool");
    return value!.toString();
  }

  set dexPool(value: string) {
    this.set("dexPool", Value.fromString(value));
  }

  get entityStats(): string {
    let value = this.get("entityStats");
    return value!.toString();
  }

  set entityStats(value: string) {
    this.set("entityStats", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get inputTokenTransfers(): Array<string> {
    let value = this.get("inputTokenTransfers");
    return value!.toStringArray();
  }

  set inputTokenTransfers(value: Array<string>) {
    this.set("inputTokenTransfers", Value.fromStringArray(value));
  }

  get outputTokenTransfer(): string {
    let value = this.get("outputTokenTransfer");
    return value!.toString();
  }

  set outputTokenTransfer(value: string) {
    this.set("outputTokenTransfer", Value.fromString(value));
  }
}

export class AirContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AirContract entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AirContract", id.toString(), this);
    }
  }

  static load(id: string): AirContract | null {
    return changetype<AirContract | null>(store.get("AirContract", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }
}
